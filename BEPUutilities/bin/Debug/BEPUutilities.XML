<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BEPUutilities</name>
    </assembly>
    <members>
        <member name="T:OpenTK.BEPUutilities.ContainmentType">
            <summary>
            The current containment state of two objects.
            </summary>
        </member>
        <member name="F:OpenTK.BEPUutilities.ContainmentType.Disjoint">
            <summary>
            The objects are separate.
            </summary>
        </member>
        <member name="F:OpenTK.BEPUutilities.ContainmentType.Contains">
            <summary>
            One object fully contains the other.
            </summary>
        </member>
        <member name="F:OpenTK.BEPUutilities.ContainmentType.Intersects">
            <summary>
            The objects are intersecting, but neither object fully contains the other.
            </summary>
        </member>
        <member name="T:OpenTK.BEPUutilities.ConvexHullHelper">
            <summary>
            Processes vertex data into convex hulls.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.ConvexHullHelper.GetConvexHull(System.Collections.Generic.IList{OpenTK.Vector3},System.Collections.Generic.IList{System.Int32})">
            <summary>
            Identifies the indices of points in a set which are on the outer convex hull of the set.
            </summary>
            <param name="points">List of points in the set.</param>
            <param name="outputTriangleIndices">List of indices into the input point set composing the triangulated surface of the convex hull.
            Each group of 3 indices represents a triangle on the surface of the hull.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.ConvexHullHelper.GetConvexHull(System.Collections.Generic.IList{OpenTK.Vector3},System.Collections.Generic.IList{OpenTK.Vector3})">
            <summary>
            Identifies the points on the surface of hull.
            </summary>
            <param name="points">List of points in the set.</param>
            <param name="outputSurfacePoints">Unique points on the surface of the convex hull.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.ConvexHullHelper.GetConvexHull(OpenTK.BEPUutilities.DataStructures.RawList{OpenTK.Vector3},System.Collections.Generic.IList{OpenTK.Vector3})">
            <summary>
            Identifies the points on the surface of hull.
            </summary>
            <param name="points">List of points in the set.</param>
            <param name="outputSurfacePoints">Unique points on the surface of the convex hull.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.ConvexHullHelper.GetConvexHull(System.Collections.Generic.IList{OpenTK.Vector3},System.Collections.Generic.IList{System.Int32},System.Collections.Generic.IList{OpenTK.Vector3})">
            <summary>
            Identifies the points on the surface of hull.
            </summary>
            <param name="points">List of points in the set.</param>
            <param name="outputTriangleIndices">List of indices into the input point set composing the triangulated surface of the convex hull.
            Each group of 3 indices represents a triangle on the surface of the hull.</param>
            <param name="outputSurfacePoints">Unique points on the surface of the convex hull.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.ConvexHullHelper.GetConvexHull(OpenTK.BEPUutilities.DataStructures.RawList{OpenTK.Vector3},OpenTK.BEPUutilities.DataStructures.RawList{System.Int32},System.Collections.Generic.IList{OpenTK.Vector3})">
            <summary>
            Identifies the points on the surface of hull.
            </summary>
            <param name="points">List of points in the set.</param>
            <param name="outputTriangleIndices">List of indices into the input point set composing the triangulated surface of the convex hull.
            Each group of 3 indices represents a triangle on the surface of the hull.</param>
            <param name="outputSurfacePoints">Unique points on the surface of the convex hull.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.ConvexHullHelper.GetConvexHull(OpenTK.BEPUutilities.DataStructures.RawList{OpenTK.Vector3},OpenTK.BEPUutilities.DataStructures.RawList{System.Int32})">
            <summary>
            Identifies the indices of points in a set which are on the outer convex hull of the set.
            </summary>
            <param name="points">List of points in the set.</param>
            <param name="outputTriangleIndices">List of indices into the input point set composing the triangulated surface of the convex hull.
            Each group of 3 indices represents a triangle on the surface of the hull.</param>
        </member>
        <member name="F:OpenTK.BEPUutilities.ConvexHullHelper.BlockedCellSets">
            <summary>
            Contains and manufactures cell sets used by the redundant point remover.  To minimize memory usage, this can be cleared
            after using the RemoveRedundantPoints if it isn't going to be used again.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.ConvexHullHelper.RemoveRedundantPoints(System.Collections.Generic.IList{OpenTK.Vector3})">
            <summary>
            Removes redundant points.  Two points are redundant if they occupy the same hash grid cell of size 0.001.
            </summary>
            <param name="points">List of points to prune.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.ConvexHullHelper.RemoveRedundantPoints(System.Collections.Generic.IList{OpenTK.Vector3},System.Double)">
            <summary>
            Removes redundant points.  Two points are redundant if they occupy the same hash grid cell.
            </summary>
            <param name="points">List of points to prune.</param>
            <param name="cellSize">Size of cells to determine redundancy.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.ConvexHullHelper.RemoveRedundantPoints(OpenTK.BEPUutilities.DataStructures.RawList{OpenTK.Vector3})">
            <summary>
            Removes redundant points.  Two points are redundant if they occupy the same hash grid cell of size 0.001.
            </summary>
            <param name="points">List of points to prune.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.ConvexHullHelper.RemoveRedundantPoints(OpenTK.BEPUutilities.DataStructures.RawList{OpenTK.Vector3},System.Double)">
            <summary>
            Removes redundant points.  Two points are redundant if they occupy the same hash grid cell.
            </summary>
            <param name="points">List of points to prune.</param>
            <param name="cellSize">Size of cells to determine redundancy.</param>
        </member>
        <member name="T:OpenTK.BEPUutilities.ConvexHullHelper.BlockedCell">
            <summary>
            Represents a cell in space which is already occupied by a point.  Any other points which resolve to the same cell are considered redundant.
            </summary>
        </member>
        <member name="T:OpenTK.BEPUutilities.DataStructures.QuickDictionary`2">
            <summary>
            Container supporting constant time adds and removes of key-value pairs while preserving fast iteration times.
            Offers very direct access to information at the cost of safety.
            </summary>
            <remarks><para>Be very careful when using this type. It has sacrificed a lot upon the altar of performance; a few notable issues include:
            it is a value type and copying it around will break things without extreme care, it cannot be validly default-constructed,
            it exposes internal structures to user modification, it is particularly vulnerable to bad hash functions, 
            it rarely checks input for errors, and the enumerator doesn't check for mid-enumeration modification.</para>
            <para>Note that the implementation is extremely simple. It uses single-step linear probing under the assumption of very low collision rates.
            A generous table capacity is recommended; this trades some memory for simplicity and runtime performance.</para></remarks>
            <typeparam name="TKey">Type of key held by the container.</typeparam>
            <typeparam name="TValue">Type of value held by the container.</typeparam>
        </member>
        <member name="F:OpenTK.BEPUutilities.DataStructures.QuickDictionary`2.Keys">
            <summary>
            Gets the backing array containing the keys of the dictionary.
            Indices from 0 to Count-1 hold actual data. All other data is undefined.
            </summary>
        </member>
        <member name="F:OpenTK.BEPUutilities.DataStructures.QuickDictionary`2.Values">
            <summary>
            Gets the backing array containing the values of the dictionary.
            Indices from 0 to Count-1 hold actual data. All other data is undefined.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickDictionary`2.#ctor(OpenTK.BEPUutilities.ResourceManagement.BufferPool{`0},OpenTK.BEPUutilities.ResourceManagement.BufferPool{`1},OpenTK.BEPUutilities.ResourceManagement.BufferPool{System.Int32},System.Int32,System.Int32)">
            <summary>
            Creates a new set.
            </summary>
            <param name="tablePool">Pool from which to retrieve integer arrays.</param>
            <param name="keyPool">Pool from which to retrieve TKey arrays.</param>
            <param name="valuePool">Pool from which to retrieve TValue arrays.</param>
            <param name="initialElementPoolIndex">Initial pool index to pull the object buffer from. The size of the initial buffer will be 2^initialElementPoolIndex.</param>
            <param name="tableSizePower">Initial pool index to pull the object buffer from. The size of the initial table buffer will be 2^(initialElementPoolIndex + tableSizePower).</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickDictionary`2.GetIndices(`0,System.Int32@,System.Int32@)">
            <summary>
            Gets the index of the element in the table.
            </summary>
            <param name="element">Element to look up.</param>
            <param name="tableIndex">Index of the element in the redirect table, or if it is not present, the index of where it would be added.</param>
            <param name="elementIndex">The index of the element in the list, if it exists; -1 otherwise.</param>
            <returns>True if the element is present in the set, false if it is not.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickDictionary`2.IndexOf(`0)">
            <summary>
            Gets the index of the key in the dictionary values list if it exists.
            </summary>
            <param name="key">Key to get the index of.</param>
            <returns>The index of the key if the key exists in the dictionary, -1 otherwise.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickDictionary`2.ContainsKey(`0)">
            <summary>
            Checks if a given key already belongs to the set.
            </summary>
            <param name="key">Key to test for.</param>
            <returns>True if the key already belongs to the set, false otherwise.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to retrieve the value associated with a key if it exists.
            </summary>
            <param name="key">Key to look up.</param>
            <param name="value">Value associated with the specified key.</param>
            <returns>True if a value was found, false otherwise.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickDictionary`2.AddAndReplace(`0,`1)">
            <summary>
            Adds a pair to the set. If a version of the key (same hash code, 'equal' by comparer) is already present,
            the existing pair is replaced by the given version.
            </summary>
            <param name="key">Key of the pair to add.</param>
            <param name="value">Value of the pair to add.</param>
            <returns>True if the pair was added to the set, false if the key was already present and its pair was replaced.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickDictionary`2.Add(`0,`1)">
            <summary>
            Adds a pair to the set if it is not already present.
            </summary>
            <param name="key">Key of the pair to add.</param>
            <param name="value">Value of the pair to add.</param>
            <returns>True if the pair was added to the set, false if the key was already present.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickDictionary`2.FastRemove(`0)">
            <summary>
            Removes a pair associated with a key from the set if belongs to the set.
            Does not preserve the order of elements in the set.
            </summary>
            <param name="key">Key of the pair to remove.</param>
            <returns>True if the key was found and removed, false otherwise.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickDictionary`2.Compact">
            <summary>
            Shrinks the internal buffers to the smallest acceptable size and releases the old buffers to the pools.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickDictionary`2.Clear">
            <summary>
            Removes all elements from the set.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickDictionary`2.Dispose">
            <summary>
            Clears and returns the set's buffers to the pools.
            </summary>
        </member>
        <member name="P:OpenTK.BEPUutilities.DataStructures.QuickDictionary`2.Count">
            <summary>
            Gets the number of elements in the set.
            </summary>
        </member>
        <member name="P:OpenTK.BEPUutilities.DataStructures.QuickDictionary`2.Item(System.Int32)">
            <summary>
            Gets or sets a key-value pair at the given index in the list representation.
            </summary>
            <param name="index">Index to grab a pair from.</param>
            <returns>Pair at the given index in the list.</returns>
        </member>
        <member name="T:OpenTK.BEPUutilities.DataStructures.QuickList`1">
            <summary>
            Container supporting list-like behaviors built on top of pooled arrays.
            </summary>
            <remarks>Be very careful when using this type. It has sacrificed a lot upon the altar of performance; a few notable issues include:
            it is a value type and copying it around will break things without extreme care, it cannot be validly default-constructed,
            it exposes internal structures to user modification, it rarely checks input for errors, and the enumerator doesn't check for mid-enumeration modification.</remarks>
            <typeparam name="T">Type of the elements in the list.</typeparam>
        </member>
        <member name="F:OpenTK.BEPUutilities.DataStructures.QuickList`1.Elements">
            <summary>
            Gets the backing array containing the elements of the list.
            Indices from 0 to Count-1 hold actual data. All other data is undefined.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickList`1.#ctor(OpenTK.BEPUutilities.ResourceManagement.BufferPool{`0},System.Int32)">
            <summary>
            Creates a new list.
            </summary>
            <param name="pool">Pool from which to retrieve typed arrays.</param>
            <param name="initialPoolIndex">Initial pool index to pull the backing array from. The size of the initial buffer will be 2^initialPoolIndex.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickList`1.EnsureCapacity(System.Int32)">
            <summary>
            Ensures that the quick list has enough room to hold the specified number of elements.
            </summary>
            <param name="count">Number of elements to hold.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickList`1.Add(`0)">
            <summary>
            Adds the element to the list.
            </summary>
            <param name="element">Item to add.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickList`1.AddUnsafely(`0)">
            <summary>
            Adds the element to the list without checking the count against the capacity.
            </summary>
            <param name="element">Item to add.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickList`1.Add(`0@)">
            <summary>
            Adds the element to the list.
            </summary>
            <param name="element">Element to add.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickList`1.AddUnsafely(`0@)">
            <summary>
            Adds the element to the list without checking the count against the capacity.
            </summary>
            <param name="element">Element to add.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickList`1.IndexOf(`0)">
            <summary>
            Gets the index of the element in the list, if present.
            </summary>
            <param name="element">Element to find.</param>
            <returns>Index of the element in the list if present, -1 otherwise.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickList`1.IndexOf(`0@)">
            <summary>
            Gets the index of the element in the list, if present.
            </summary>
            <param name="element">Element to find.</param>
            <returns>Index of the element in the list if present, -1 otherwise.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickList`1.Remove(`0)">
            <summary>
            Removes an element from the list. Preserves the order of elements.
            </summary>
            <param name="element">Element to remove from the list.</param>
            <returns>True if the element was present and was removed, false otherwise.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickList`1.Remove(`0@)">
            <summary>
            Removes an element from the list. Preserves the order of elements.
            </summary>
            <param name="element">Element to remove from the list.</param>
            <returns>True if the element was present and was removed, false otherwise.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickList`1.FastRemove(`0)">
            <summary>
            Removes an element from the list. Does not preserve the order of elements.
            </summary>
            <param name="element">Element to remove from the list.</param>
            <returns>True if the element was present and was removed, false otherwise.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickList`1.FastRemove(`0@)">
            <summary>
            Removes an element from the list. Does not preserve the order of elements.
            </summary>
            <param name="element">Element to remove from the list.</param>
            <returns>True if the element was present and was removed, false otherwise.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickList`1.RemoveAt(System.Int32)">
            <summary>
            Removes an element from the list at the given index. Preserves the order of elements.
            </summary>
            <param name="index">Index of the element to remove from the list.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickList`1.FastRemoveAt(System.Int32)">
            <summary>
            Removes an element from the list at the given index. Does not preserve the order of elements.
            </summary>
            <param name="index">Index of the element to remove from the list.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickList`1.TryPop(`0@)">
            <summary>
            Removes and outputs the last element in the list if it exists.
            </summary>
            <param name="element">Last element of the list.</param>
            <returns>True if the element existed and was removed, false otherwise.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="element"/> should be inserted.</param>
            <param name="element">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickList`1.Insert(System.Int32,`0@)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="element"/> should be inserted.</param>
            <param name="element">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickList`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="element"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
            <param name="element">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickList`1.Contains(`0@)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="element"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
            <param name="element">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param><param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception><exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickList`1.Clear">
            <summary>
            Clears the list by setting the count to zero and explicitly setting all relevant indices in the backing array to default values.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickList`1.Compact">
            <summary>
            Compacts the internal buffer to the minimum size required for the number of elements in the list.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickList`1.Dispose">
            <summary>
            Clears and returns the list's buffers.
            </summary>
        </member>
        <member name="P:OpenTK.BEPUutilities.DataStructures.QuickList`1.Pool">
            <summary>
            Gets the pool used by the quick list.
            </summary>
        </member>
        <member name="P:OpenTK.BEPUutilities.DataStructures.QuickList`1.Count">
            <summary>
            Gets or sets the number of elements in the list.
            </summary>
        </member>
        <member name="P:OpenTK.BEPUutilities.DataStructures.QuickList`1.Item(System.Int32)">
            <summary>
            Gets an element at the given index in the list.
            </summary>
            <param name="index">Index to grab an element from.</param>
            <returns>Element at the given index in the list.</returns>
        </member>
        <member name="P:OpenTK.BEPUutilities.DataStructures.QuickList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="T:OpenTK.BEPUutilities.DataStructures.QuickQueue`1">
            <summary>
            Container supporting double ended queue behaviors built on top of pooled arrays.
            </summary>
            <remarks>Be very careful when using this type. It has sacrificed a lot upon the altar of performance; a few notable issues include:
            it is a value type and copying it around will break things without extreme care, it cannot be validly default-constructed,
            it exposes internal structures to user modification, it rarely checks input for errors, and the enumerator doesn't check for mid-enumeration modification.</remarks>
            <typeparam name="T">Type of the elements in the queue.</typeparam>
        </member>
        <member name="F:OpenTK.BEPUutilities.DataStructures.QuickQueue`1.Elements">
            <summary>
            Gets the backing array containing the elements of the queue.
            Indices from FirstIndex to LastIndex inclusive hold actual data. All other data is undefined.
            Watch out for wrap around; LastIndex can be less than FirstIndex even when count > 0!
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickQueue`1.#ctor(OpenTK.BEPUutilities.ResourceManagement.BufferPool{`0},System.Int32)">
            <summary>
            Creates a new queue.
            </summary>
            <param name="pool">Pool from which to retrieve typed arrays.</param>
            <param name="initialPoolIndex">Initial pool index to pull the backing array from. The size of the initial buffer will be 2^initialPoolIndex.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickQueue`1.Enqueue(`0)">
            <summary>
            Enqueues the element to the end of the queue, incrementing the last index.
            </summary>
            <param name="element">Item to enqueue.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickQueue`1.EnqueueFirst(`0)">
            <summary>
            Enqueues the element to the start of the queue, decrementing the first index.
            </summary>
            <param name="element">Item to enqueue.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickQueue`1.Enqueue(`0@)">
            <summary>
            Enqueues the element to the end of the queue, incrementing the last index.
            </summary>
            <param name="element">Item to enqueue.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickQueue`1.EnqueueFirst(`0@)">
            <summary>
            Enqueues the element to the start of the queue, decrementing the first index.
            </summary>
            <param name="element">Item to enqueue.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickQueue`1.Dequeue">
            <summary>
            Dequeues an element from the start of the queue, incrementing the first index.
            </summary>
            <returns>Element removed from the queue.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickQueue`1.DequeueLast">
            <summary>
            Dequeues an element from the end of the queue, decrementing the last index.
            </summary>
            <returns>Element removed from the queue.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickQueue`1.TryDequeue(`0@)">
            <summary>
            Attempts to dequeue an element from the start of the queue, incrementing the first index.
            </summary>
            <param name="element">Element removed from the queue, if any.</param>
            <returns>True if an element was available to remove, false otherwise.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickQueue`1.TryDequeueLast(`0@)">
            <summary>
            Attempts to dequeue an element from the end of the queue, decrementing the last index.
            </summary>
            <param name="element">Element removed from the queue, if any.</param>
            <returns>True if an element was available to remove, false otherwise.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickQueue`1.Clear">
            <summary>
            Clears the list by setting the count to zero and explicitly setting all relevant indices in the backing array to default values.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickQueue`1.Compact">
            <summary>
            Compacts the internal buffer to the minimum size required for the number of elements in the list.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickQueue`1.Dispose">
            <summary>
            Clears and returns the list's buffers.
            </summary>
        </member>
        <member name="P:OpenTK.BEPUutilities.DataStructures.QuickQueue`1.FirstIndex">
            <summary>
            Gets the index of the first element in the queue.
            </summary>
        </member>
        <member name="P:OpenTK.BEPUutilities.DataStructures.QuickQueue`1.LastIndex">
            <summary>
            Gets the index of the last element in the queue.
            </summary>
        </member>
        <member name="P:OpenTK.BEPUutilities.DataStructures.QuickQueue`1.Count">
            <summary>
            Gets the number of pairs in the list.
            </summary>
        </member>
        <member name="P:OpenTK.BEPUutilities.DataStructures.QuickQueue`1.Item(System.Int32)">
            <summary>
            Gets an element at the given index in the list.
            0 gets the element at the FirstIndex. Count-1 would get the element at LastIndex.
            </summary>
            <param name="index">Index to grab an element from.</param>
            <returns>Element at the given index in the list.</returns>
        </member>
        <member name="T:OpenTK.BEPUutilities.DataStructures.QuickSet`1">
            <summary>
            Container supporting constant time adds and removes while preserving fast iteration times.
            Offers very direct access to information at the cost of safety.
            </summary>
            <remarks><para>Be very careful when using this type. It has sacrificed a lot upon the altar of performance; a few notable issues include:
            it is a value type and copying it around will break things without extreme care, it cannot be validly default-constructed,
            it exposes internal structures to user modification, it is particularly vulnerable to bad hash functions, 
            it rarely checks input for errors, and the enumerator doesn't check for mid-enumeration modification.</para>
            <para>Note that the implementation is extremely simple. It uses single-step linear probing under the assumption of very low collision rates.
            A generous table capacity is recommended; this trades some memory for simplicity and runtime performance.</para></remarks>
            <typeparam name="T">Type of element held by the container.</typeparam>
        </member>
        <member name="F:OpenTK.BEPUutilities.DataStructures.QuickSet`1.Elements">
            <summary>
            Gets the backing array containing the elements of the set.
            Indices from 0 to Count-1 hold actual data. All other data is undefined.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickSet`1.#ctor(OpenTK.BEPUutilities.ResourceManagement.BufferPool{`0},OpenTK.BEPUutilities.ResourceManagement.BufferPool{System.Int32},System.Int32,System.Int32)">
            <summary>
            Creates a new set.
            </summary>
            <param name="tablePool">Pool from which to retrieve integer arrays.</param>
            <param name="elementPool">Pool from which to retrieve typed arrays.</param>
            <param name="initialElementPoolIndex">Initial pool index to pull the object buffer from. The size of the initial buffer will be 2^initialElementPoolIndex.</param>
            <param name="tableSizePower">Initial pool index to pull the object buffer from. The size of the initial table buffer will be 2^(initialElementPoolIndex + tableSizePower).</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickSet`1.GetIndices(`0,System.Int32@,System.Int32@)">
            <summary>
            Gets the index of the element in the table.
            </summary>
            <param name="element">Element to look up.</param>
            <param name="tableIndex">Index of the element in the redirect table, or if it is not present, the index of where it would be added.</param>
            <param name="elementIndex">The index of the element in the list, if it exists; -1 otherwise.</param>
            <returns>True if the element is present in the set, false if it is not.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickSet`1.IndexOf(`0)">
            <summary>
            Gets the index of the element in the list if it exists.
            </summary>
            <param name="element">Element to get the index of.</param>
            <returns>The index of the element if the element exists in the list, -1 otherwise.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickSet`1.Contains(`0)">
            <summary>
            Checks if a given element already belongs to the set.
            </summary>
            <param name="element">Element to test for.</param>
            <returns>True if the element already belongs to the set, false otherwise.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickSet`1.AddAndReplace(`0)">
            <summary>
            Adds an element to the set. If a version of the element (same hash code, 'equal' by comparer) is already present,
            it is replaced by the given version.
            </summary>
            <param name="element">Element to add.</param>
            <returns>True if the element was added to the set, false if the element was already present and was instead replaced.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickSet`1.Add(`0)">
            <summary>
            Adds an element to the set if it is not already present.
            </summary>
            <param name="element">Element to add.</param>
            <returns>True if the element was added to the set, false if the element was already present.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickSet`1.FastRemove(`0)">
            <summary>
            Removes an element from the set if belongs to the set.
            Does not preserve the order of elements in the set.
            </summary>
            <param name="element">Element to remove.</param>
            <returns>True if the element was found and removed, false otherwise.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickSet`1.Compact">
            <summary>
            Shrinks the internal buffers to the smallest acceptable size and releases the old buffers to the pools.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickSet`1.Clear">
            <summary>
            Removes all elements from the set.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.QuickSet`1.Dispose">
            <summary>
            Clears and returns the set's buffers to the pools.
            </summary>
        </member>
        <member name="P:OpenTK.BEPUutilities.DataStructures.QuickSet`1.Count">
            <summary>
            Gets the number of elements in the set.
            </summary>
        </member>
        <member name="P:OpenTK.BEPUutilities.DataStructures.QuickSet`1.Item(System.Int32)">
            <summary>
            Gets or sets an element at the given index in the list representation.
            </summary>
            <param name="index">Index to grab an element from.</param>
            <returns>Element at the given index in the list.</returns>
        </member>
        <member name="T:OpenTK.BEPUutilities.Int2">
            <summary>
            Provides simple 2d cell hashing.
            </summary>
        </member>
        <member name="T:OpenTK.BEPUutilities.PermutationMapper">
            <summary>
            Maps indices to permuted versions of the indices.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.PermutationMapper.#ctor">
            <summary>
            Constructs a new permutation mapper.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.PermutationMapper.GetMappedIndex(System.Int64,System.Int32)">
            <summary>
            Gets a remapped index.
            </summary>
            <param name="index">Original index of an element in the set to be redirected to a shuffled position.</param>
            <param name="setSize">Size of the set being permuted. Must be smaller than 350000041.</param>
            <returns>The remapped index.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.PermutationMapper.GetMappedIndex(System.Int32,System.Int32)">
            <summary>
            Gets a remapped index.
            </summary>
            <param name="index">Original index of an element in the set to be redirected to a shuffled position.</param>
            <param name="setSize">Size of the set being permuted. Must be smaller than 350000041.</param>
            <returns>The remapped index.</returns>
        </member>
        <member name="P:OpenTK.BEPUutilities.PermutationMapper.PermutationIndex">
            <summary>
            Gets or sets the permutation index used by the solver.  If the simulation is restarting from a given frame,
            setting this index to be consistent is required for deterministic results.
            </summary>
        </member>
        <member name="T:OpenTK.BEPUutilities.ResourceManagement.BufferPool`1">
            <summary>
            Provides storage for reusable arrays with power-of-2 lengths.
            </summary>
            <typeparam name="T">Type of resource contained in the buffers.</typeparam>
            <remarks>This is designed for use with unsafe code. It often sacrifices safety for performance or simplicity.
            Running with DEBUG defined will catch some misuse, but otherwise many invalid usages will be allowed.</remarks>
        </member>
        <member name="F:OpenTK.BEPUutilities.ResourceManagement.BufferPool`1.MaximumPoolIndex">
            <summary>
            Defines the maximum buffer size. Maximum length is 2^MaximumPoolIndex.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.ResourceManagement.BufferPool`1.#ctor">
            <summary>
            Constructs a new resource buffer pool.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.ResourceManagement.BufferPool`1.GetPoolIndex(System.Int32)">
            <summary>
            Gets the exponent associated with the buffer pool which would hold the given count of elements.
            </summary>
            <param name="count">Element count to compute the batch index of.</param>
            <returns>Exponent associated with the buffer pool which would hold the given count of elements.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.ResourceManagement.BufferPool`1.TakeFromPoolIndex(System.Int32)">
            <summary>
            Takes a buffer from the given pool index.
            </summary>
            <param name="poolIndex">Pool to grab a buffer from.</param>
            <returns>Pool of the requested size.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.ResourceManagement.BufferPool`1.Take(System.Int32)">
            <summary>
            Grabs a buffer of sufficient size to hold the given number of elements.
            </summary>
            <param name="minimumSize">Number of elements that must be able to fit in the buffer.</param>
            <returns>Buffer of sufficient size to hold the given number of elements.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.ResourceManagement.BufferPool`1.GiveBack(`0[],System.Int32)">
            <summary>
            Releases a buffer back to the pool without clearing it out.
            </summary>
            <param name="buffer">Buffer to return to the pool.</param>
            <param name="poolIndex">Pool index associated with the buffer.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.ResourceManagement.BufferPool`1.GiveBack(`0[])">
            <summary>
            Gives a buffer back to the pool without clearing it out. The caller should clear the buffer.
            </summary>
            <param name="buffer">Buffer to return to the pool.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.ResourceManagement.BufferPool`1.EnsureBufferCount(System.Int32,System.Int32)">
            <summary>
            Ensures that there are at least the specified number of buffers allocated for the given batch index.
            </summary>
            <param name="poolIndex">Pool index to ensure the count of.</param>
            <param name="count">Minimum number of elements that need to exist in the specified pool.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.ResourceManagement.BufferPool`1.Clear">
            <summary>
            Drops all references held by the pool.
            </summary>
        </member>
        <member name="P:OpenTK.BEPUutilities.ResourceManagement.BufferPool`1.SuppressCleanBufferAsserts">
            <summary>
            Gets or sets whether to check buffers for cleanliness when they are returned when compiled in debug mode. A clean buffer is defined as one that contains all default values.
            </summary>
        </member>
        <member name="T:OpenTK.BEPUutilities.ResourceManagement.BufferPools`1">
            <summary>
            Contains locking and thread static buffer pools for the specified type.
            </summary>
            <typeparam name="T">Type of element in the buffers stored in the pools.</typeparam>
        </member>
        <member name="P:OpenTK.BEPUutilities.ResourceManagement.BufferPools`1.Locking">
            <summary>
            Gets a buffer pool for this type which provides thread safe resource acquisition and return.</summary>
        </member>
        <member name="P:OpenTK.BEPUutilities.ResourceManagement.BufferPools`1.Thread">
            <summary>
            Gets the pool associated with this thread.
            </summary>
        </member>
        <member name="T:OpenTK.BEPUutilities.ResourceManagement.LockingBufferPool`1">
            <summary>
            Provides storage for reusable arrays with power-of-2 lengths.
            Provides thread safe TakeFromPoolIndex, Take, and GiveBack implementations.
            </summary>
            <typeparam name="T">Type of resource contained in the buffers.</typeparam>
        </member>
        <member name="M:OpenTK.BEPUutilities.ResourceManagement.LockingBufferPool`1.TakeFromPoolIndex(System.Int32)">
            <summary>
            Takes a buffer from the given pool index.
            </summary>
            <param name="poolIndex">Pool to grab a buffer from.</param>
            <returns>Pool of the requested size.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.ResourceManagement.LockingBufferPool`1.GiveBack(`0[],System.Int32)">
            <summary>
            Releases a buffer back to the pool without clearing it out.
            </summary>
            <param name="buffer">Buffer to return to the pool.</param>
            <param name="poolIndex">Pool index associated with the buffer.</param>
        </member>
        <member name="T:OpenTK.BEPUutilities.Threading.IParallelLooper">
            <summary>
            Provides a multithreaded for loop interface.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.Threading.IParallelLooper.ForLoop(System.Int32,System.Int32,System.Action{System.Int32})">
            <summary>
            Loops from the starting index (inclusive) to the ending index (exclusive), calling the loopBody at each iteration.
            The forLoop function will not return until all iterations are complete.
            This is meant to be used in a 'fork-join' model; only a single thread should be running a forLoop
            at any time.
            </summary>
            <param name="startIndex">Inclusive starting index.</param>
            <param name="endIndex">Exclusive ending index.</param>
            <param name="loopBody">Function that handles an individual iteration of the loop.</param>
        </member>
        <member name="P:OpenTK.BEPUutilities.Threading.IParallelLooper.ThreadCount">
            <summary>
            Gets the number of threads available to the loop.
            This is used to configure job sizes where applicable.
            It does not have to be exactly correct; an estimate will work.
            Better estimates should result in better performance.
            </summary>
        </member>
        <member name="T:OpenTK.BEPUutilities.Threading.ParallelLooper">
            <summary>
            Manages parallel for loops.
            Cannot handle general task-based parallelism.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.Threading.ParallelLooper.#ctor">
            <summary>
            Constructs a new parallel loop manager.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.Threading.ParallelLooper.AddThread">
            <summary>
            Adds a thread to the manager.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.Threading.ParallelLooper.AddThread(System.Action)">
            <summary>
            Adds a thread to the manager.
            </summary>
            <param name="threadStart">Initialization to run on the worker thread.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.Threading.ParallelLooper.RemoveThread">
            <summary>
            Removes a thread from the manager.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.Threading.ParallelLooper.ForLoop(System.Int32,System.Int32,System.Action{System.Int32})">
            <summary>
            Iterates over the interval.
            </summary>
            <param name="beginIndex">Starting index of the iteration.</param>
            <param name="endIndex">Ending index of the iteration.</param>
            <param name="loopBody">Function to call on each iteration.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.Threading.ParallelLooper.Dispose">
            <summary>
            Releases resources used by the object.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.Threading.ParallelLooper.Finalize">
            <summary>
            Releases resources used by the object.
            </summary>
        </member>
        <member name="P:OpenTK.BEPUutilities.Threading.ParallelLooper.MinimumTasksPerThread">
            <summary>
            Gets or sets the minimum number of tasks to be allocated to each thread
            per loop.
            </summary>
        </member>
        <member name="P:OpenTK.BEPUutilities.Threading.ParallelLooper.MaximumIterationsPerTask">
            <summary>
            Gets or sets the maximum number of loop iterations
            per individual task.
            </summary>
        </member>
        <member name="P:OpenTK.BEPUutilities.Threading.ParallelLooper.ThreadCount">
            <summary>
            Gets the number of threads used by the looper.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.Threading.ParallelLoopWorker.Dispose">
            <summary>
            Disposes the worker.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.Threading.ParallelLoopWorker.Finalize">
            <summary>
            Releases resources used by the object.
            </summary>
        </member>
        <member name="T:OpenTK.BEPUutilities.DataStructures.ConcurrentDeque`1">
            <summary>
            Locked queue supporting dequeues from both ends.
            </summary>
            <typeparam name="T">Type of contained elements.</typeparam>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.ConcurrentDeque`1.Enqueue(`0)">
            <summary>
            Enqueues an element to the tail of the queue with locking.
            </summary>
            <param name="item">Dequeued element, if any.</param>
            <returns>True if an element could be dequeued, false otherwise.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.ConcurrentDeque`1.TryDequeueFirst(`0@)">
            <summary>
            Tries to dequeue the first element of the queue with locking.
            </summary>
            <param name="item">Dequeued element, if any.</param>
            <returns>True if an element could be dequeued, false otherwise.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.ConcurrentDeque`1.TryDequeueLast(`0@)">
            <summary>
            Tries to dequeue the last element of the queue with locking.
            </summary>
            <param name="item">Dequeued element, if any.</param>
            <returns>True if an element could be dequeued, false otherwise.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.ConcurrentDeque`1.TryUnsafeDequeueFirst(`0@)">
            <summary>
            Tries to dequeue the first element of the queue without locking.
            </summary>
            <param name="item">Dequeued element, if any.</param>
            <returns>True if an element could be dequeued, false otherwise.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.ConcurrentDeque`1.TryUnsafeDequeueLast(`0@)">
            <summary>
            Tries to dequeue the last element of the queue without locking.
            </summary>
            <param name="item">Dequeued element, if any.</param>
            <returns>True if an element could be dequeued, false otherwise.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.ConcurrentDeque`1.UnsafeEnqueue(`0)">
            <summary>
            Enqueues an element onto the tail of the deque without locking.
            </summary>
            <param name="item">Element to enqueue.</param>
        </member>
        <member name="P:OpenTK.BEPUutilities.DataStructures.ConcurrentDeque`1.Count">
            <summary>
            Number of elements in the deque.
            </summary>
        </member>
        <member name="T:OpenTK.BEPUutilities.AffineTransform">
            <summary>
             A transformation composed of a linear transformation and a translation.
            </summary>
        </member>
        <member name="F:OpenTK.BEPUutilities.AffineTransform.Translation">
            <summary>
             Translation in the affine transform.
            </summary>
        </member>
        <member name="F:OpenTK.BEPUutilities.AffineTransform.LinearTransform">
            <summary>
            Linear transform in the affine transform.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.AffineTransform.#ctor(OpenTK.Vector3@)">
            <summary>
             Constructs a new affine transform.
            </summary>
            <param name="translation">Translation to use in the transform.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.AffineTransform.#ctor(OpenTK.Vector3)">
            <summary>
             Constructs a new affine transform.
            </summary>
            <param name="translation">Translation to use in the transform.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.AffineTransform.#ctor(OpenTK.Quaternion@,OpenTK.Vector3@)">
            <summary>
             Constructs a new affine tranform.
            </summary>
            <param name="orientation">Orientation to use as the linear transform.</param>
            <param name="translation">Translation to use in the transform.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.AffineTransform.#ctor(OpenTK.Quaternion,OpenTK.Vector3)">
            <summary>
             Constructs a new affine tranform.
            </summary>
            <param name="orientation">Orientation to use as the linear transform.</param>
            <param name="translation">Translation to use in the transform.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.AffineTransform.#ctor(OpenTK.Vector3@,OpenTK.Quaternion@,OpenTK.Vector3@)">
            <summary>
             Constructs a new affine transform.
            </summary>
            <param name="scaling">Scaling to apply in the linear transform.</param>
            <param name="orientation">Orientation to apply in the linear transform.</param>
            <param name="translation">Translation to apply.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.AffineTransform.#ctor(OpenTK.Vector3,OpenTK.Quaternion,OpenTK.Vector3)">
            <summary>
             Constructs a new affine transform.
            </summary>
            <param name="scaling">Scaling to apply in the linear transform.</param>
            <param name="orientation">Orientation to apply in the linear transform.</param>
            <param name="translation">Translation to apply.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.AffineTransform.#ctor(OpenTK.Matrix3x3@,OpenTK.Vector3@)">
            <summary>
             Constructs a new affine transform.
            </summary>
            <param name="linearTransform">The linear transform component.</param>
            <param name="translation">Translation component of the transform.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.AffineTransform.#ctor(OpenTK.Matrix3x3,OpenTK.Vector3)">
            <summary>
             Constructs a new affine transform.
            </summary>
            <param name="linearTransform">The linear transform component.</param>
            <param name="translation">Translation component of the transform.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.AffineTransform.Transform(OpenTK.Vector3@,OpenTK.BEPUutilities.AffineTransform@,OpenTK.Vector3@)">
            <summary>
             Transforms a vector by an affine transform.
            </summary>
            <param name="position">Position to transform.</param>
            <param name="transform">Transform to apply.</param>
            <param name="transformed">Transformed position.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.AffineTransform.TransformInverse(OpenTK.Vector3@,OpenTK.BEPUutilities.AffineTransform@,OpenTK.Vector3@)">
            <summary>
             Transforms a vector by an affine transform's inverse.
            </summary>
            <param name="position">Position to transform.</param>
            <param name="transform">Transform to invert and apply.</param>
            <param name="transformed">Transformed position.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.AffineTransform.Invert(OpenTK.BEPUutilities.AffineTransform@,OpenTK.BEPUutilities.AffineTransform@)">
            <summary>
             Inverts an affine transform.
            </summary>
            <param name="transform">Transform to invert.</param>
             <param name="inverse">Inverse of the transform.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.AffineTransform.Multiply(OpenTK.BEPUutilities.AffineTransform@,OpenTK.BEPUutilities.AffineTransform@,OpenTK.BEPUutilities.AffineTransform@)">
            <summary>
            Multiplies a transform by another transform.
            </summary>
            <param name="a">First transform.</param>
            <param name="b">Second transform.</param>
            <param name="transform">Combined transform.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.AffineTransform.Multiply(OpenTK.BEPUutilities.RigidTransform@,OpenTK.BEPUutilities.AffineTransform@,OpenTK.BEPUutilities.AffineTransform@)">
            <summary>
             Multiplies a rigid transform by an affine transform.
            </summary>
            <param name="a">Rigid transform.</param>
            <param name="b">Affine transform.</param>
            <param name="transform">Combined transform.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.AffineTransform.Transform(OpenTK.Vector3,OpenTK.BEPUutilities.AffineTransform)">
            <summary>
             Transforms a vector using an affine transform.
            </summary>
            <param name="position">Position to transform.</param>
            <param name="affineTransform">Transform to apply.</param>
            <returns>Transformed position.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.AffineTransform.CreateFromRigidTransform(OpenTK.BEPUutilities.RigidTransform@,OpenTK.BEPUutilities.AffineTransform@)">
            <summary>
            Creates an affine transform from a rigid transform.
            </summary>
            <param name="rigid">Rigid transform to base the affine transform on.</param>
            <param name="affine">Affine transform created from the rigid transform.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.AffineTransform.CreateFromRigidTransform(OpenTK.BEPUutilities.RigidTransform)">
            <summary>
            Creates an affine transform from a rigid transform.
            </summary>
            <param name="rigid">Rigid transform to base the affine transform on.</param>
            <returns>Affine transform created from the rigid transform.</returns>
        </member>
        <member name="P:OpenTK.BEPUutilities.AffineTransform.Matrix">
            <summary>
             Gets or sets the 4x4 matrix representation of the affine transform.
             The linear transform is the upper left 3x3 part of the 4x4 Matrix4.
             The translation is included in the matrix's Translation property.
            </summary>
        </member>
        <member name="P:OpenTK.BEPUutilities.AffineTransform.Identity">
            <summary>
             Gets the identity affine transform.
            </summary>
        </member>
        <member name="T:OpenTK.BEPUutilities.BoundingBox">
            <summary>
            Provides XNA-like axis-aligned bounding box functionality.
            </summary>
        </member>
        <member name="F:OpenTK.BEPUutilities.BoundingBox.Min">
            <summary>
            Location with the lowest X, Y, and Z coordinates in the axis-aligned bounding box.
            </summary>
        </member>
        <member name="F:OpenTK.BEPUutilities.BoundingBox.Max">
            <summary>
            Location with the highest X, Y, and Z coordinates in the axis-aligned bounding box.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.BoundingBox.#ctor(OpenTK.Vector3,OpenTK.Vector3)">
            <summary>
            Constructs a bounding box from the specified minimum and maximum.
            </summary>
            <param name="min">Location with the lowest X, Y, and Z coordinates contained by the axis-aligned bounding box.</param>
            <param name="max">Location with the highest X, Y, and Z coordinates contained by the axis-aligned bounding box.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.BoundingBox.GetCorners">
            <summary>
            Gets an array of locations corresponding to the 8 corners of the bounding box.
            </summary>
            <returns>Corners of the bounding box.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.BoundingBox.Intersects(OpenTK.BEPUutilities.BoundingBox)">
            <summary>
            Determines if a bounding box intersects another bounding box.
            </summary>
            <param name="boundingBox">Bounding box to test against.</param>
            <returns>Whether the bounding boxes intersected.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.BoundingBox.Intersects(OpenTK.BEPUutilities.BoundingBox@,System.Boolean@)">
            <summary>
            Determines if a bounding box intersects another bounding box.
            </summary>
            <param name="boundingBox">Bounding box to test against.</param>
            <param name="intersects">Whether the bounding boxes intersect.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.BoundingBox.Intersects(OpenTK.BEPUutilities.BoundingSphere@,System.Boolean@)">
            <summary>
            Determines if a bounding box intersects a bounding sphere.
            </summary>
            <param name="boundingSphere">Sphere to test for intersection.</param>
            <param name="intersects">Whether the bounding shapes intersect.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.BoundingBox.CreateFromPoints(System.Collections.Generic.IList{OpenTK.Vector3})">
            <summary>
            Creates the smallest possible bounding box that contains a list of points.
            </summary>
            <param name="points">Points to enclose with a bounding box.</param>
            <returns>Bounding box which contains the list of points.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.BoundingBox.CreateMerged(OpenTK.BEPUutilities.BoundingBox@,OpenTK.BEPUutilities.BoundingBox@,OpenTK.BEPUutilities.BoundingBox@)">
            <summary>
            Creates the smallest bounding box which contains two other bounding boxes.
            </summary>
            <param name="a">First bounding box to be contained.</param>
            <param name="b">Second bounding box to be contained.</param>
            <param name="merged">Smallest bounding box which contains the two input bounding boxes.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.BoundingBox.CreateFromSphere(OpenTK.BEPUutilities.BoundingSphere@,OpenTK.BEPUutilities.BoundingBox@)">
            <summary>
            Creates a bounding box from a bounding sphere.
            </summary>
            <param name="boundingSphere">Bounding sphere to be used to create the bounding box.</param>
            <param name="boundingBox">Bounding box created from the bounding sphere.</param>
        </member>
        <member name="T:OpenTK.BEPUutilities.BoundingSphere">
            <summary>
            Provides XNA-like bounding sphere functionality.
            </summary>
        </member>
        <member name="F:OpenTK.BEPUutilities.BoundingSphere.Radius">
            <summary>
            Radius of the sphere.
            </summary>
        </member>
        <member name="F:OpenTK.BEPUutilities.BoundingSphere.Center">
            <summary>
            Location of the center of the sphere.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.BoundingSphere.#ctor(OpenTK.Vector3,System.Single)">
            <summary>
            Constructs a new bounding sphere.
            </summary>
            <param name="center">Location of the center of the sphere.</param>
            <param name="radius">Radius of the sphere.</param>
        </member>
        <member name="T:OpenTK.BEPUutilities.MathChecker">
            <summary>
            Contains conditional extensions to check for bad values in various structures.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.MathChecker.IsInvalid(System.Single)">
            <summary>
            Checks a single float for validity.  Separate from the extension method to avoid throwing exceptions deep in a call tree.
            </summary>
            <param name="f">Value to validate.</param>
            <returns>True if the value is invalid, false if it is valid.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.MathChecker.Validate(System.Single)">
            <summary>
            Checks the value to see if it is a NaN or infinite.  If it is, an exception is thrown.
            This is only run when the CHECKMATH symbol is defined.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.MathChecker.Validate(OpenTK.Vector3)">
            <summary>
            Checks the value to see if it is a NaN or infinite.  If it is, an exception is thrown.
            This is only run when the CHECKMATH symbol is defined.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.MathChecker.Validate(OpenTK.Matrix2)">
            <summary>
            Checks the value to see if it is a NaN or infinite.  If it is, an exception is thrown.
            This is only run when the CHECKMATH symbol is defined.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.MathChecker.Validate(OpenTK.Matrix3x2)">
            <summary>
            Checks the value to see if it is a NaN or infinite.  If it is, an exception is thrown.
            This is only run when the CHECKMATH symbol is defined.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.MathChecker.Validate(OpenTK.Matrix2x3)">
            <summary>
            Checks the value to see if it is a NaN or infinite.  If it is, an exception is thrown.
            This is only run when the CHECKMATH symbol is defined.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.MathChecker.Validate(OpenTK.Matrix3x3)">
            <summary>
            Checks the value to see if it is a NaN or infinite.  If it is, an exception is thrown.
            This is only run when the CHECKMATH symbol is defined.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.MathChecker.Validate(OpenTK.Matrix4)">
            <summary>
            Checks the value to see if it is a NaN or infinite.  If it is, an exception is thrown.
            This is only run when the CHECKMATH symbol is defined.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.MathChecker.Validate(OpenTK.Quaternion)">
            <summary>
            Checks the value to see if it is a NaN or infinite.  If it is, an exception is thrown.
            This is only run when the CHECKMATH symbol is defined.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.MathChecker.Validate(OpenTK.BEPUutilities.RigidTransform)">
            <summary>
            Checks the value to see if it is a NaN or infinite.  If it is, an exception is thrown.
            This is only run when the CHECKMATH symbol is defined.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.MathChecker.Validate(OpenTK.BEPUutilities.AffineTransform)">
            <summary>
            Checks the value to see if it is a NaN or infinite.  If it is, an exception is thrown.
            This is only run when the CHECKMATH symbol is defined.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.MathChecker.Validate(OpenTK.BEPUutilities.BoundingBox)">
            <summary>
            Checks the value to see if it is a NaN or infinite.  If it is, an exception is thrown.
            This is only run when the CHECKMATH symbol is defined.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.MathChecker.Validate(OpenTK.BEPUutilities.BoundingSphere)">
            <summary>
            Checks the value to see if it is a NaN or infinite.  If it is, an exception is thrown.
            This is only run when the CHECKMATH symbol is defined.
            </summary>
        </member>
        <member name="T:OpenTK.BEPUutilities.MathHelper">
            <summary>
            Contains helper math methods.
            </summary>
        </member>
        <member name="F:OpenTK.BEPUutilities.MathHelper.Pi">
            <summary>
            Approximate value of Pi.
            </summary>
        </member>
        <member name="F:OpenTK.BEPUutilities.MathHelper.TwoPi">
            <summary>
            Approximate value of Pi multiplied by two.
            </summary>
        </member>
        <member name="F:OpenTK.BEPUutilities.MathHelper.PiOver2">
            <summary>
            Approximate value of Pi divided by two.
            </summary>
        </member>
        <member name="F:OpenTK.BEPUutilities.MathHelper.PiOver4">
            <summary>
            Approximate value of Pi divided by four.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.MathHelper.WrapAngle(System.Single)">
            <summary>
            Reduces the angle into a range from -Pi to Pi.
            </summary>
            <param name="angle">Angle to wrap.</param>
            <returns>Wrapped angle.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.MathHelper.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Clamps a value between a minimum and maximum value.
            </summary>
            <param name="value">Value to clamp.</param>
            <param name="min">Minimum value.  If the value is less than this, the minimum is returned instead.</param>
            <param name="max">Maximum value.  If the value is more than this, the maximum is returned instead.</param>
            <returns>Clamped value.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.MathHelper.Max(System.Single,System.Single)">
            <summary>
            Returns the higher value of the two parameters.
            </summary>
            <param name="a">First value.</param>
            <param name="b">Second value.</param>
            <returns>Higher value of the two parameters.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.MathHelper.Min(System.Single,System.Single)">
            <summary>
            Returns the lower value of the two parameters.
            </summary>
            <param name="a">First value.</param>
            <param name="b">Second value.</param>
            <returns>Lower value of the two parameters.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.MathHelper.ToRadians(System.Single)">
            <summary>
            Converts degrees to radians.
            </summary>
            <param name="degrees">Degrees to convert.</param>
            <returns>Radians equivalent to the input degrees.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.MathHelper.ToDegrees(System.Single)">
            <summary>
            Converts radians to degrees.
            </summary>
            <param name="radians">Radians to convert.</param>
            <returns>Degrees equivalent to the input radians.</returns>
        </member>
        <member name="T:OpenTK.BEPUutilities.Plane">
            <summary>
            Provides XNA-like plane functionality.
            </summary>
        </member>
        <member name="F:OpenTK.BEPUutilities.Plane.Normal">
            <summary>
            Normal of the plane.
            </summary>
        </member>
        <member name="F:OpenTK.BEPUutilities.Plane.D">
            <summary>
            Negative distance to the plane from the origin along the normal.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.Plane.#ctor(OpenTK.Vector3@,OpenTK.Vector3@)">
            <summary>
            Constructs a new plane.
            </summary>
            <param name="position">A point on the plane.</param>
            <param name="normal">The normal of the plane.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.Plane.#ctor(OpenTK.Vector3,OpenTK.Vector3)">
            <summary>
            Constructs a new plane.
            </summary>
            <param name="position">A point on the plane.</param>
            <param name="normal">The normal of the plane.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.Plane.#ctor(OpenTK.Vector3,System.Single)">
            <summary>
            Constructs a new plane.
            </summary>
            <param name="normal">Normal of the plane.</param>
            <param name="d">Negative distance to the plane from the origin along the normal.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.Plane.#ctor(OpenTK.Vector3@,System.Single)">
            <summary>
            Constructs a new plane.
            </summary>
            <param name="normal">Normal of the plane.</param>
            <param name="d">Negative distance to the plane from the origin along the normal.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.Plane.DotCoordinate(OpenTK.Vector3@,System.Single@)">
            <summary>
            Gets the dot product of the position offset from the plane along the plane's normal.
            </summary>
            <param name="v">Position to compute the dot product of.</param>
            <param name="dot">Dot product.</param>
        </member>
        <member name="T:OpenTK.BEPUutilities.Ray">
            <summary>
            Provides XNA-like ray functionality.
            </summary>
        </member>
        <member name="F:OpenTK.BEPUutilities.Ray.Position">
            <summary>
            Starting position of the ray.
            </summary>
        </member>
        <member name="F:OpenTK.BEPUutilities.Ray.Direction">
            <summary>
            Direction in which the ray points.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.Ray.#ctor(OpenTK.Vector3,OpenTK.Vector3)">
            <summary>
            Constructs a new ray.
            </summary>
            <param name="position">Starting position of the ray.</param>
            <param name="direction">Direction in which the ray points.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.Ray.Intersects(OpenTK.BEPUutilities.BoundingBox@,System.Single@)">
            <summary>
            Determines if and when the ray intersects the bounding box.
            </summary>
            <param name="boundingBox">Bounding box to test against.</param>
            <param name="t">The length along the ray to the impact, if any impact occurs.</param>
            <returns>True if the ray intersects the target, false otherwise.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.Ray.Intersects(OpenTK.BEPUutilities.BoundingBox,System.Single@)">
            <summary>
            Determines if and when the ray intersects the bounding box.
            </summary>
            <param name="boundingBox">Bounding box to test against.</param>
            <param name="t">The length along the ray to the impact, if any impact occurs.</param>
            <returns>True if the ray intersects the target, false otherwise.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.Ray.Intersects(OpenTK.BEPUutilities.Plane@,System.Single@)">
            <summary>
            Determines if and when the ray intersects the plane.
            </summary>
            <param name="plane">Plane to test against.</param>
            <param name="t">The length along the ray to the impact, if any impact occurs.</param>
            <returns>True if the ray intersects the target, false otherwise.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.Ray.Intersects(OpenTK.BEPUutilities.Plane,System.Single@)">
            <summary>
            Determines if and when the ray intersects the plane.
            </summary>
            <param name="plane">Plane to test against.</param>
            <param name="t">The length along the ray to the impact, if any impact occurs.</param>
            <returns>True if the ray intersects the target, false otherwise.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.Ray.GetPointOnRay(System.Single,OpenTK.Vector3@)">
            <summary>
            Computes a point along a ray given the length along the ray from the ray position.
            </summary>
            <param name="t">Length along the ray from the ray position in terms of the ray's direction.</param>
            <param name="v">Point along the ray at the given location.</param>
        </member>
        <member name="T:OpenTK.BEPUutilities.RayHit">
            <summary>
             Contains ray hit data.
            </summary>
        </member>
        <member name="F:OpenTK.BEPUutilities.RayHit.Location">
            <summary>
             Location of the ray hit.
            </summary>
        </member>
        <member name="F:OpenTK.BEPUutilities.RayHit.Normal">
            <summary>
             Normal of the ray hit.
            </summary>
        </member>
        <member name="F:OpenTK.BEPUutilities.RayHit.T">
            <summary>
             T parameter of the ray hit.  
             The ray hit location is equal to the ray origin added to the ray direction multiplied by T.
            </summary>
        </member>
        <member name="T:OpenTK.BEPUutilities.RigidTransform">
            <summary>
             Transform composed of a rotation and translation.
            </summary>
        </member>
        <member name="F:OpenTK.BEPUutilities.RigidTransform.Position">
            <summary>
             Translation component of the transform.
            </summary>
        </member>
        <member name="F:OpenTK.BEPUutilities.RigidTransform.Orientation">
            <summary>
             Rotation component of the transform.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.RigidTransform.#ctor(OpenTK.Vector3,OpenTK.Quaternion)">
            <summary>
             Constructs a new rigid transform.
            </summary>
            <param name="position">Translation component of the transform.</param>
            <param name="orientation">Rotation component of the transform.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.RigidTransform.#ctor(OpenTK.Vector3)">
            <summary>
             Constructs a new rigid transform.
            </summary>
            <param name="position">Translation component of the transform.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.RigidTransform.#ctor(OpenTK.Quaternion)">
            <summary>
             Constructs a new rigid transform.
            </summary>
            <param name="orienation">Rotation component of the transform.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.RigidTransform.Invert(OpenTK.BEPUutilities.RigidTransform@,OpenTK.BEPUutilities.RigidTransform@)">
            <summary>
            Inverts a rigid transform.
            </summary>
            <param name="transform">Transform to invert.</param>
            <param name="inverse">Inverse of the transform.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.RigidTransform.Multiply(OpenTK.BEPUutilities.RigidTransform@,OpenTK.BEPUutilities.RigidTransform@,OpenTK.BEPUutilities.RigidTransform@)">
            <summary>
             Concatenates a rigid transform with another rigid transform.
            </summary>
            <param name="a">The first rigid transform.</param>
            <param name="b">The second rigid transform.</param>
            <param name="combined">Concatenated rigid transform.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.RigidTransform.MultiplyByInverse(OpenTK.BEPUutilities.RigidTransform@,OpenTK.BEPUutilities.RigidTransform@,OpenTK.BEPUutilities.RigidTransform@)">
            <summary>
             Concatenates a rigid transform with another rigid transform's inverse.
            </summary>
            <param name="a">The first rigid transform.</param>
            <param name="b">The second rigid transform whose inverse will be concatenated to the first.</param>
            <param name="combinedTransform">Combined rigid transform.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.RigidTransform.Transform(OpenTK.Vector3@,OpenTK.BEPUutilities.RigidTransform@,OpenTK.Vector3@)">
            <summary>
             Transforms a position by a rigid transform.
            </summary>
            <param name="position">Position to transform.</param>
            <param name="transform">Transform to apply.</param>
            <param name="result">Transformed position.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.RigidTransform.TransformByInverse(OpenTK.Vector3@,OpenTK.BEPUutilities.RigidTransform@,OpenTK.Vector3@)">
            <summary>
             Transforms a position by a rigid transform's inverse.
            </summary>
            <param name="position">Position to transform.</param>
            <param name="transform">Transform to invert and apply.</param>
            <param name="result">Transformed position.</param>
        </member>
        <member name="P:OpenTK.BEPUutilities.RigidTransform.OrientationMatrix">
            <summary>
            Gets the orientation matrix created from the orientation of the rigid transform.
            </summary>
        </member>
        <member name="P:OpenTK.BEPUutilities.RigidTransform.Matrix">
            <summary>
             Gets the 4x4 matrix created from the rigid transform.
            </summary>
        </member>
        <member name="P:OpenTK.BEPUutilities.RigidTransform.Identity">
            <summary>
             Gets the identity rigid transform.
            </summary>
        </member>
        <member name="T:OpenTK.BEPUutilities.TriangleSidedness">
            <summary>
             Sidedness of a triangle or mesh.
             A triangle can be double sided, or allow one of its sides to let interacting objects through.
            </summary>
        </member>
        <member name="F:OpenTK.BEPUutilities.TriangleSidedness.DoubleSided">
            <summary>
            The triangle will interact with objects coming from both directions.
            </summary>
        </member>
        <member name="F:OpenTK.BEPUutilities.TriangleSidedness.Clockwise">
            <summary>
            The triangle will interact with objects from which the winding of the triangle appears to be clockwise.
            </summary>
        </member>
        <member name="F:OpenTK.BEPUutilities.TriangleSidedness.Counterclockwise">
            <summary>
            The triangle will interact with objects from which the winding of the triangle appears to be counterclockwise..
            </summary>
        </member>
        <member name="T:OpenTK.BEPUutilities.DataStructures.ObservableDictionary`2">
            <summary>
             Dictionary that provides events when the inner dictionary is changed.
            </summary>
            <typeparam name="TKey">Type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">Type of the values in the dictionary.</typeparam>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.ObservableDictionary`2.#ctor">
            <summary>
            Constructs a new observable dictionary.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.ObservableDictionary`2.Add(`0,`1)">
            <summary>
             Adds a pair to the dictionary.
            </summary>
            <param name="key">Key of the element.</param>
            <param name="value">Value of the element.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.ObservableDictionary`2.Remove(`0)">
            <summary>
             Removes a key and its associated value from the dictionary, if present.
            </summary>
            <param name="key">Key of the element to remove.</param>
            <returns>Whether or not the object was found.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.ObservableDictionary`2.Clear">
            <summary>
             Clears the dictionary of all elements.
            </summary>
        </member>
        <member name="P:OpenTK.BEPUutilities.DataStructures.ObservableDictionary`2.WrappedDictionary">
            <summary>
             Gets or sets the dictionary wrapped by the observable dictionary.
             While the inner dictionary can be changed, making modifications to it will
             not trigger any changed events.
            </summary>
        </member>
        <member name="E:OpenTK.BEPUutilities.DataStructures.ObservableDictionary`2.Changed">
            <summary>
             Fires when the dictionary's elements are changed using the wrapping functions.
            </summary>
        </member>
        <member name="T:OpenTK.BEPUutilities.DataStructures.ObservableList`1">
            <summary>
             List of objects which fires events when it is changed.
            </summary>
            <typeparam name="T">Type of elements in the list.</typeparam>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.ObservableList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
             Constructs a new observable list.
            </summary>
            <param name="list">List to copy into the internal wrapped list.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.ObservableList`1.#ctor">
            <summary>
             Constructs an empty observable list.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.ObservableList`1.#ctor(System.Int32)">
            <summary>
             Constructs an empty observable list with a given capacity.
            </summary>
            <param name="initialCapacity">Initial allocated storage in the list.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.ObservableList`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.ObservableList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param><param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.ObservableList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.ObservableList`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.ObservableList`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.ObservableList`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.ObservableList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param><param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception><exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.-or-Type cannot be cast automatically to the type of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.ObservableList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.ObservableList`1.GetEnumerator">
            <summary>
             Gets an enumerator for the list.
            </summary>
            <returns>Enumerator for the list.</returns>
        </member>
        <member name="P:OpenTK.BEPUutilities.DataStructures.ObservableList`1.WrappedList">
            <summary>
            Gets the list wrapped by the observable list. Adds and removes made to this list directly will not trigger events.
            </summary>
        </member>
        <member name="E:OpenTK.BEPUutilities.DataStructures.ObservableList`1.Changed">
            <summary>
             Fires when elements in the list are changed.
            </summary>
        </member>
        <member name="P:OpenTK.BEPUutilities.DataStructures.ObservableList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <returns>
            The element at the specified index.
            </returns>
            <param name="index">The zero-based index of the element to get or set.</param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception><exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="P:OpenTK.BEPUutilities.DataStructures.ObservableList`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="T:OpenTK.BEPUutilities.DataStructures.RawList`1">
            <summary>
             No-frills list that wraps an accessible array.
            </summary>
            <typeparam name="T">Type of elements contained by the list.</typeparam>
        </member>
        <member name="F:OpenTK.BEPUutilities.DataStructures.RawList`1.Elements">
            <summary>
             Direct access to the elements owned by the raw list.
             Be careful about the operations performed on this list;
             use the normal access methods if in doubt.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.RawList`1.#ctor">
            <summary>
             Constructs an empty list.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.RawList`1.#ctor(System.Int32)">
            <summary>
             Constructs an empty list.
            </summary>
            <param name="initialCapacity">Initial capacity to allocate for the list.</param>
            <exception cref="T:System.ArgumentException">Thrown when the initial capacity is zero or negative.</exception>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.RawList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
             Constructs a raw list from another list.
            </summary>
            <param name="elements">List to copy.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.RawList`1.RemoveAt(System.Int32)">
            <summary>
            Removes an element from the list.
            </summary>
            <param name="index">Index of the element to remove.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.RawList`1.FastRemoveAt(System.Int32)">
            <summary>
            Removes an element from the list without maintaining order.
            </summary>
            <param name="index">Index of the element to remove.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.RawList`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.RawList`1.AddRange(OpenTK.BEPUutilities.DataStructures.RawList{`0})">
            <summary>
             Adds a range of elements to the list from another list.
            </summary>
            <param name="items">Elements to add.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.RawList`1.AddRange(System.Collections.Generic.List{`0})">
            <summary>
             Adds a range of elements to the list from another list.
            </summary>
            <param name="items">Elements to add.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.RawList`1.AddRange(System.Collections.Generic.IList{`0})">
            <summary>
             Adds a range of elements to the list from another list.
            </summary>
            <param name="items">Elements to add.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.RawList`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.RawList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.RawList`1.FastRemove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the collection without maintaining element order.
            </summary>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.RawList`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.RawList`1.ToArray">
            <summary>
            Copies the elements from the list into an array.
            </summary>
            <returns>An array containing the elements in the list.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.RawList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the element at the specified index.
            </summary>
            <param name="index">Index to insert the item.</param>
            <param name="item">Element to insert.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.RawList`1.FastInsert(System.Int32,`0)">
            <summary>
            Inserts the element at the specified index without maintaining list order.
            </summary>
            <param name="index">Index to insert the item.</param>
            <param name="item">Element to insert.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.RawList`1.Contains(`0)">
            <summary>
            Determines if an item is present in the list.
            </summary>
            <param name="item">Item to be tested.</param>
            <returns>Whether or not the item was contained by the list.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.RawList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the list's contents to the array.
            </summary>
            <param name="array">Array to receive the list's contents.</param>
            <param name="arrayIndex">Index in the array to start the dump.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.RawList`1.GetEnumerator">
            <summary>
             Gets an enumerator for the list.
            </summary>
            <returns>Enumerator for the list.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.RawList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
             Sorts the list.
            </summary>
            <param name="comparer">Comparer to use to sort the list.</param>
        </member>
        <member name="P:OpenTK.BEPUutilities.DataStructures.RawList`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            Can also be set; setting the count is a direct change to the count integer and does not change the state of the array.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:OpenTK.BEPUutilities.DataStructures.RawList`1.Capacity">
            <summary>
             Gets or sets the current size allocated for the list.
             If the new capacity is less than the current Count, the excess elements are truncated.
            </summary>
        </member>
        <member name="P:OpenTK.BEPUutilities.DataStructures.RawList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element of the list at the given index.
            </summary>
            <param name="index">Index in the list.</param>
            <returns>Element at the given index.</returns>
        </member>
        <member name="T:OpenTK.BEPUutilities.DataStructures.RawList`1.Enumerator">
            <summary>
             Enumerator for the RawList.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.RawList`1.Enumerator.#ctor(OpenTK.BEPUutilities.DataStructures.RawList{`0})">
            <summary>
             Constructs a new enumerator.
            </summary>
            <param name="list"></param>
        </member>
        <member name="T:OpenTK.BEPUutilities.DataStructures.RawValueList`1">
            <summary>
             No-frills list used for value types that contain no reference types.
            </summary>
            <typeparam name="T">Type of the elements in the list.</typeparam>
        </member>
        <member name="F:OpenTK.BEPUutilities.DataStructures.RawValueList`1.Elements">
            <summary>
             Directly accessible array of elements in the list.
             Be careful about which operations are applied to the array;
             if in doubt, use the regular access methods.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.RawValueList`1.#ctor">
            <summary>
             Constructs an empty list.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.RawValueList`1.#ctor(System.Int32)">
            <summary>
             Constructs an empty list.
            </summary>
            <param name="initialCapacity">Initial capacity of the list.</param>
            <exception cref="T:System.ArgumentException">Thrown when the initial capcity is less than or equal to zero.</exception>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.RawValueList`1.RemoveAt(System.Int32)">
            <summary>
             Removes an element from the list.
            </summary>
            <param name="index">Index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the index is not present in the list.</exception>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.RawValueList`1.Add(`0@)">
            <summary>
             Adds an element to the list.
            </summary>
            <param name="item">Item to add.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.RawValueList`1.Clear">
            <summary>
             Clears the list of all elements.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.RawValueList`1.Remove(`0@)">
            <summary>
             Removes an element from the list.
            </summary>
            <param name="item">Item to remove.</param>
            <returns>Whether or not the item was present in the list.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.RawValueList`1.IndexOf(`0@)">
            <summary>
             Gets the index of an element in the list.
            </summary>
            <param name="item">Item to search for.</param>
            <returns>Index of the searched element.</returns>
        </member>
        <member name="P:OpenTK.BEPUutilities.DataStructures.RawValueList`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            Can also be set; setting the count is a direct change to the count integer and does not change the state of the array.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:OpenTK.BEPUutilities.DataStructures.RawValueList`1.Capacity">
            <summary>
             Gets or sets the current size allocated for the list.
            </summary>
        </member>
        <member name="T:OpenTK.BEPUutilities.DataStructures.ReadOnlyDictionary`2">
            <summary>
             Wraps a dictionary in a read only collection.
            </summary>
            <typeparam name="TKey">Type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">Type of values in the dictionary.</typeparam>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Constructs a new read-only wrapper dictionary.
            </summary>
            <param name="dictionary">Internal dictionary to use.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.ReadOnlyDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
            <summary>
            Gets an enumerator for key-value pairs in the dictionary.
            </summary>
            <returns>Enumerator for the dictionary.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.ReadOnlyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for key-value pairs in the dictionary.
            </summary>
            <returns>Enumerator for the dictionary.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.ReadOnlyDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines if the dictionary contains a key-value pair.
            </summary>
            <param name="item">Key-value pair to look for.</param>
            <returns>Whether or not the key-value pair is present.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.ReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>
            Determines if the dictionary contains a given key.
            </summary>
            <param name="key">Key to check for.</param>
            <returns>Whether or not the key is contained.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.ReadOnlyDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the key-value pairs of the dictionary into an array.
            </summary>
            <param name="array">Target array.</param>
            <param name="arrayIndex">The zero-based index at which copying begins.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to retrieve a value from the dictionary using a key.
            </summary>
            <param name="key">Key to look for.</param>
            <param name="value">Value associated with the key.</param>
            <returns>Whether or not the key exists.</returns>
        </member>
        <member name="P:OpenTK.BEPUutilities.DataStructures.ReadOnlyDictionary`2.Count">
            <summary>
            Gets the number of elements in the dictionary.
            </summary>
        </member>
        <member name="P:OpenTK.BEPUutilities.DataStructures.ReadOnlyDictionary`2.IsReadOnly">
            <summary>
            Gets whether or not this dictionary is read-only.
            </summary>
        </member>
        <member name="P:OpenTK.BEPUutilities.DataStructures.ReadOnlyDictionary`2.Item(`0)">
            <summary>
            Gets the value associated with the key in the dictionary.
            </summary>
            <param name="key">Key to look for in the dictionary.</param>
            <returns>Value associated with the key.</returns>
        </member>
        <member name="P:OpenTK.BEPUutilities.DataStructures.ReadOnlyDictionary`2.Keys">
            <summary>
            Gets an enumerable set of keys in the dictionary.
            </summary>
        </member>
        <member name="P:OpenTK.BEPUutilities.DataStructures.ReadOnlyDictionary`2.Values">
            <summary>
            Gets an enumerable set of values in the dictionary.
            </summary>
        </member>
        <member name="T:OpenTK.BEPUutilities.DataStructures.ReadOnlyEnumerable`1">
            <summary>
             Wraps an enumerable in a temporary enumeration struct.
            </summary>
            <typeparam name="T">Type of the enumerable being iterated.</typeparam>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.ReadOnlyEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
             Constructs a new read only enumerable.
            </summary>
            <param name="enumerable">Enumerable to wrap.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.ReadOnlyEnumerable`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="T:OpenTK.BEPUutilities.DataStructures.ReadOnlyList`1">
            <summary>
            Wraps a list in an enumerable struct.
            </summary>
            <typeparam name="T">Type contained by the list.</typeparam>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.ReadOnlyList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Constructs a new read-only list.
            </summary>
            <param name="wrappedList">List wrapped by the read-only list.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.ReadOnlyList`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.ReadOnlyList`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.ReadOnlyList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param><param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception><exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.-or-Type <paramref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="P:OpenTK.BEPUutilities.DataStructures.ReadOnlyList`1.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <returns>
            The element at the specified index.
            </returns>
            <param name="index">The zero-based index of the element to get.</param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception><exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="P:OpenTK.BEPUutilities.DataStructures.ReadOnlyList`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="T:OpenTK.BEPUutilities.DataStructures.ReadOnlyList`1.Enumerator">
            <summary>
            Enumerates the read only list.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.ReadOnlyList`1.Enumerator.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
             Constructs an enumerator.
            </summary>
            <param name="wrappedList">Collection to which the enumerator belongs.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.ReadOnlyList`1.Enumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.ReadOnlyList`1.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.ReadOnlyList`1.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:OpenTK.BEPUutilities.DataStructures.ReadOnlyList`1.Enumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="T:OpenTK.BEPUutilities.DataStructures.TinyList`1">
            <summary>
            Special datatype used for heapless lists without unsafe/stackalloc.
            Designed for object types or reference-sized structs (int, float...).
            Stores a maximum of 8 entries.
            </summary>
            <typeparam name="T">Struct type to use.</typeparam>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.TinyList`1.ToString">
            <summary>
            Creates a string representation of the list.
            </summary>
            <returns>String representation of the list.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.TinyList`1.Add(`0)">
            <summary>
            Tries to add an element to the list.
            </summary>
            <param name="item">Item to add.</param>
            <returns>Whether or not the item could be added.
            Will return false when the list is full.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.TinyList`1.Clear">
            <summary>
            Clears the list.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.TinyList`1.IndexOf(`0)">
            <summary>
            Gets the index of the item in the list, if it is present.
            </summary>
            <param name="item">Item to look for.</param>
            <returns>Index of the item, if present.  -1 otherwise.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.TinyList`1.Remove(`0)">
            <summary>
            Tries to remove an element from the list.
            </summary>
            <param name="item">Item to remove.</param>
            <returns>Whether or not the item existed in the list.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.TinyList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">Index of the element to remove.</param>
            <returns>Whether or not the item could be removed.
            Returns false if the index is out of bounds.</returns>
        </member>
        <member name="P:OpenTK.BEPUutilities.DataStructures.TinyList`1.Count">
            <summary>
            Gets the current number of elements in the list.
            </summary>
        </member>
        <member name="P:OpenTK.BEPUutilities.DataStructures.TinyList`1.Item(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="index">Index to retrieve.</param>
            <returns>Retrieved item.</returns>
        </member>
        <member name="T:OpenTK.BEPUutilities.DataStructures.TinyStructList`1">
            <summary>
            Special datatype used for heapless lists without unsafe/stackalloc.
            Since reference types would require heap-side allocation and
            do not match well with this structure's ref-parameter based access,
            only structs are allowed.
            Stores a maximum of 8 entries.
            </summary>
            <typeparam name="T">Struct type to use.</typeparam>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.TinyStructList`1.ToString">
            <summary>
            Creates a string representation of the list.
            </summary>
            <returns>String representation of the list.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.TinyStructList`1.Add(`0@)">
            <summary>
            Tries to add an element to the list.
            </summary>
            <param name="item">Item to add.</param>
            <returns>Whether or not the item could be added.
            Will return false when the list is full.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.TinyStructList`1.Clear">
            <summary>
            Clears the list.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.TinyStructList`1.Get(System.Int32,`0@)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="index">Index to retrieve.</param>
            <param name="item">Retrieved item.</param>
            <returns>Whether or not the index was valid.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.TinyStructList`1.IndexOf(`0@)">
            <summary>
            Gets the index of the item in the list, if it is present.
            </summary>
            <param name="item">Item to look for.</param>
            <returns>Index of the item, if present.  -1 otherwise.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.TinyStructList`1.Remove(`0@)">
            <summary>
            Tries to remove an element from the list.
            </summary>
            <param name="item">Item to remove.</param>
            <returns>Whether or not the item existed in the list.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.TinyStructList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">Index of the element to remove.</param>
            <returns>Whether or not the item could be removed.
            Returns false if the index is out of bounds.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.DataStructures.TinyStructList`1.Replace(System.Int32,`0@)">
            <summary>
            Tries to add an element to the list.
            </summary>
            <param name="index">Index to replace.</param>
            <param name="item">Item to add.</param>
            <returns>Whether or not the item could be replaced.
            Returns false if the index is invalid.</returns>
        </member>
        <member name="P:OpenTK.BEPUutilities.DataStructures.TinyStructList`1.Count">
            <summary>
            Gets the current number of elements in the list.
            </summary>
        </member>
        <member name="T:OpenTK.BEPUutilities.ResourceManagement.LockingResourcePool`1">
            <summary>
            Uses a spinlock to safely access resources.
            </summary>
            <typeparam name="T">Type of object to store in the pool.</typeparam>
        </member>
        <member name="T:OpenTK.BEPUutilities.ResourceManagement.ResourcePool`1">
            <summary>
            Manages a cache of a type of resource.
            </summary>
            <typeparam name="T">Type of object to pool.</typeparam>
        </member>
        <member name="M:OpenTK.BEPUutilities.ResourceManagement.ResourcePool`1.GiveBack(`0)">
            <summary>
            Gives an item back to the resource pool.
            </summary>
            <param name="item">Item to return.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.ResourceManagement.ResourcePool`1.Initialize(System.Int32)">
            <summary>
            Initializes the pool with some resources.
            Throws away excess resources.
            </summary>
            <param name="initialResourceCount">Number of resources to include.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.ResourceManagement.ResourcePool`1.Take">
            <summary>
            Takes an item from the resource pool.
            </summary>
            <returns>Item to take.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.ResourceManagement.ResourcePool`1.CreateNewResource">
            <summary>
            Creates and returns a new resource.
            </summary>
            <returns>New resource.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.ResourceManagement.ResourcePool`1.Clear">
            <summary>
            Removes all elements from the pool.
            </summary>
        </member>
        <member name="P:OpenTK.BEPUutilities.ResourceManagement.ResourcePool`1.Count">
            <summary>
            Gets the number of resources in the pool.
            Even if the resource count hits 0, resources
            can still be requested; they will be allocated
            dynamically.
            </summary>
        </member>
        <member name="P:OpenTK.BEPUutilities.ResourceManagement.ResourcePool`1.InstanceInitializer">
            <summary>
            Gets or sets the function that configures new instances.
            This is only called once per object created for the resource pool.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.ResourceManagement.LockingResourcePool`1.#ctor(System.Int32,System.Action{`0})">
            <summary>
            Constructs a new thread-unsafe resource pool.
            </summary>
            <param name="initialResourceCount">Number of resources to include in the pool by default.</param>
            <param name="initializer">Function to initialize new instances in the resource pool with.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.ResourceManagement.LockingResourcePool`1.#ctor(System.Int32)">
            <summary>
            Constructs a new thread-unsafe resource pool.
            </summary>
            <param name="initialResourceCount">Number of resources to include in the pool by default.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.ResourceManagement.LockingResourcePool`1.#ctor">
            <summary>
            Constructs a new thread-unsafe resource pool.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.ResourceManagement.LockingResourcePool`1.GiveBack(`0)">
            <summary>
            Gives an item back to the resource pool.
            </summary>
            <param name="item">Item to return.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.ResourceManagement.LockingResourcePool`1.Initialize(System.Int32)">
            <summary>
            Initializes the pool with some resources.
            Throws away excess resources.
            </summary>
            <param name="initialResourceCount">Number of resources to include.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.ResourceManagement.LockingResourcePool`1.Take">
            <summary>
            Takes an item from the resource pool.
            </summary>
            <returns>Item to take.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.ResourceManagement.LockingResourcePool`1.Clear">
            <summary>
            Clears out the resource pool.
            </summary>
        </member>
        <member name="P:OpenTK.BEPUutilities.ResourceManagement.LockingResourcePool`1.Count">
            <summary>
            Gets the number of resources in the pool.
            Even if the resource count hits 0, resources
            can still be requested; they will be allocated
            dynamically.
            </summary>
        </member>
        <member name="T:OpenTK.BEPUutilities.ResourceManagement.UnsafeResourcePool`1">
            <summary>
            Manages a resource type, but performs no locking to handle asynchronous access.
            </summary>
            <typeparam name="T">Type of object to store in the pool.</typeparam>
        </member>
        <member name="M:OpenTK.BEPUutilities.ResourceManagement.UnsafeResourcePool`1.#ctor(System.Int32,System.Action{`0})">
            <summary>
            Constructs a new locking resource pool.
            </summary>
            <param name="initialResourceCount">Number of resources to include in the pool by default.</param>
            <param name="initializer">Function to initialize new instances in the resource pool with.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.ResourceManagement.UnsafeResourcePool`1.#ctor(System.Int32)">
            <summary>
            Constructs a new locking resource pool.
            </summary>
            <param name="initialResourceCount">Number of resources to include in the pool by default.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.ResourceManagement.UnsafeResourcePool`1.#ctor">
            <summary>
            Constructs a new locking resource pool.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.ResourceManagement.UnsafeResourcePool`1.GiveBack(`0)">
            <summary>
            Gives an item back to the resource pool.
            </summary>
            <param name="item">Item to return.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.ResourceManagement.UnsafeResourcePool`1.Initialize(System.Int32)">
            <summary>
            Initializes the pool with some resources.
            Throws away excess resources.
            </summary>
            <param name="initialResourceCount">Number of resources to include.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.ResourceManagement.UnsafeResourcePool`1.Take">
            <summary>
            Takes an item from the resource pool.
            </summary>
            <returns>Item to take.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.ResourceManagement.UnsafeResourcePool`1.Clear">
            <summary>
            Clears out the resource pool.
            </summary>
        </member>
        <member name="P:OpenTK.BEPUutilities.ResourceManagement.UnsafeResourcePool`1.Count">
            <summary>
            Gets the number of resources in the pool.
            Even if the resource count hits 0, resources
            can still be requested; they will be allocated
            dynamically.
            </summary>
        </member>
        <member name="T:OpenTK.BEPUutilities.ResourceManagement.CommonResources">
            <summary>
            Handles allocation and management of commonly used resources.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.ResourceManagement.CommonResources.GetRayHitList">
            <summary>
            Retrieves a ray hit list from the resource pool.
            </summary>
            <returns>Empty ray hit list.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.ResourceManagement.CommonResources.GiveBack(OpenTK.BEPUutilities.DataStructures.RawList{OpenTK.BEPUutilities.RayHit})">
            <summary>
            Returns a resource to the pool.
            </summary>
            <param name="list">List to return.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.ResourceManagement.CommonResources.GetIntList">
            <summary>
            Retrieves a int list from the resource pool.
            </summary>
            <returns>Empty int list.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.ResourceManagement.CommonResources.GiveBack(OpenTK.BEPUutilities.DataStructures.RawList{System.Int32})">
            <summary>
            Returns a resource to the pool.
            </summary>
            <param name="list">List to return.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.ResourceManagement.CommonResources.GetIntSet">
            <summary>
            Retrieves a int hash set from the resource pool.
            </summary>
            <returns>Empty int set.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.ResourceManagement.CommonResources.GiveBack(System.Collections.Generic.HashSet{System.Int32})">
            <summary>
            Returns a resource to the pool.
            </summary>
            <param name="set">Set to return.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.ResourceManagement.CommonResources.GetFloatList">
            <summary>
            Retrieves a float list from the resource pool.
            </summary>
            <returns>Empty float list.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.ResourceManagement.CommonResources.GiveBack(OpenTK.BEPUutilities.DataStructures.RawList{System.Single})">
            <summary>
            Returns a resource to the pool.
            </summary>
            <param name="list">List to return.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.ResourceManagement.CommonResources.GetVectorList">
            <summary>
            Retrieves a Vector3 list from the resource pool.
            </summary>
            <returns>Empty Vector3 list.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.ResourceManagement.CommonResources.GiveBack(OpenTK.BEPUutilities.DataStructures.RawList{OpenTK.Vector3})">
            <summary>
            Returns a resource to the pool.
            </summary>
            <param name="list">List to return.</param>
        </member>
        <member name="T:OpenTK.BEPUutilities.SpinLock">
            <summary>
            Synchronizes using a busy wait.  Take care when using this; if the critical section is long or there's any doubt about the use of a busy wait, consider using Monitor locks or other approaches instead.
            Replaces the .NET SpinLock on PC and provides its functionality on the Xbox360.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.SpinLock.Enter">
            <summary>
            Enters the critical section.  A thread cannot attempt to enter the spinlock if it already owns the spinlock.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.SpinLock.TryEnter">
            <summary>
            Attempts to enters the critical section.  A thread cannot attempt to enter the spinlock if it already owns the spinlock.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.SpinLock.Exit">
            <summary>
            Exits the critical section.  This can only be safely called from the same
            thread of execution after a corresponding Enter.
            </summary>
        </member>
        <member name="T:OpenTK.BEPUutilities.Toolbox">
            <summary>
            Helper class with many algorithms for intersection testing and 3D math.
            </summary>
        </member>
        <member name="F:OpenTK.BEPUutilities.Toolbox.BigEpsilon">
            <summary>
            Large tolerance value. Defaults to 1e-5f.
            </summary>
        </member>
        <member name="F:OpenTK.BEPUutilities.Toolbox.Epsilon">
            <summary>
            Tolerance value. Defaults to 1e-7f.
            </summary>
        </member>
        <member name="F:OpenTK.BEPUutilities.Toolbox.NoVector">
            <summary>
            Represents an invalid Vector3.
            </summary>
        </member>
        <member name="F:OpenTK.BEPUutilities.Toolbox.BackVector">
            <summary>
            Reference for a vector with dimensions (0,0,1).
            </summary>
        </member>
        <member name="F:OpenTK.BEPUutilities.Toolbox.DownVector">
            <summary>
            Reference for a vector with dimensions (0,-1,0).
            </summary>
        </member>
        <member name="F:OpenTK.BEPUutilities.Toolbox.ForwardVector">
            <summary>
            Reference for a vector with dimensions (0,0,-1).
            </summary>
        </member>
        <member name="F:OpenTK.BEPUutilities.Toolbox.IdentityOrientation">
            <summary>
            Refers to the identity quaternion.
            </summary>
        </member>
        <member name="F:OpenTK.BEPUutilities.Toolbox.LeftVector">
            <summary>
            Reference for a vector with dimensions (-1,0,0).
            </summary>
        </member>
        <member name="F:OpenTK.BEPUutilities.Toolbox.RightVector">
            <summary>
            Reference for a vector with dimensions (1,0,0).
            </summary>
        </member>
        <member name="F:OpenTK.BEPUutilities.Toolbox.UpVector">
            <summary>
            Reference for a vector with dimensions (0,1,0).
            </summary>
        </member>
        <member name="F:OpenTK.BEPUutilities.Toolbox.ZeroMatrix">
            <summary>
            Matrix containing zeroes for every element.
            </summary>
        </member>
        <member name="F:OpenTK.BEPUutilities.Toolbox.ZeroVector">
            <summary>
            Reference for a vector with dimensions (0,0,0).
            </summary>
        </member>
        <member name="F:OpenTK.BEPUutilities.Toolbox.RigidIdentity">
            <summary>
            Refers to the rigid identity transformation.
            </summary>
        </member>
        <member name="M:OpenTK.BEPUutilities.Toolbox.FindRayTriangleIntersection(OpenTK.BEPUutilities.Ray@,System.Single,OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@,System.Boolean@,OpenTK.BEPUutilities.RayHit@)">
            <summary>
            Determines the intersection between a ray and a triangle.
            </summary>
            <param name="ray">Ray to test.</param>
            <param name="maximumLength">Maximum length to travel in units of the direction's length.</param>
            <param name="a">First vertex of the triangle.</param>
            <param name="b">Second vertex of the triangle.</param>
            <param name="c">Third vertex of the triangle.</param>
            <param name="hitClockwise">True if the the triangle was hit on the clockwise face, false otherwise.</param>
            <param name="hit">Hit data of the ray, if any</param>
            <returns>Whether or not the ray and triangle intersect.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.Toolbox.FindRayTriangleIntersection(OpenTK.BEPUutilities.Ray@,System.Single,OpenTK.BEPUutilities.TriangleSidedness,OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.BEPUutilities.RayHit@)">
            <summary>
            Determines the intersection between a ray and a triangle.
            </summary>
            <param name="ray">Ray to test.</param>
            <param name="maximumLength">Maximum length to travel in units of the direction's length.</param>
            <param name="sidedness">Sidedness of the triangle to test.</param>
            <param name="a">First vertex of the triangle.</param>
            <param name="b">Second vertex of the triangle.</param>
            <param name="c">Third vertex of the triangle.</param>
            <param name="hit">Hit data of the ray, if any</param>
            <returns>Whether or not the ray and triangle intersect.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.Toolbox.GetSegmentPlaneIntersection(OpenTK.Vector3,OpenTK.Vector3,OpenTK.Vector3,OpenTK.Vector3,OpenTK.Vector3,OpenTK.Vector3@)">
            <summary>
            Finds the intersection between the given segment and the given plane defined by three points.
            </summary>
            <param name="a">First endpoint of segment.</param>
            <param name="b">Second endpoint of segment.</param>
            <param name="d">First vertex of a triangle which lies on the plane.</param>
            <param name="e">Second vertex of a triangle which lies on the plane.</param>
            <param name="f">Third vertex of a triangle which lies on the plane.</param>
            <param name="q">Intersection point.</param>
            <returns>Whether or not the segment intersects the plane.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.Toolbox.GetSegmentPlaneIntersection(OpenTK.Vector3,OpenTK.Vector3,OpenTK.BEPUutilities.Plane,OpenTK.Vector3@)">
            <summary>
            Finds the intersection between the given segment and the given plane.
            </summary>
            <param name="a">First endpoint of segment.</param>
            <param name="b">Second enpoint of segment.</param>
            <param name="p">Plane for comparison.</param>
            <param name="q">Intersection point.</param>
            <returns>Whether or not the segment intersects the plane.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.Toolbox.GetSegmentPlaneIntersection(OpenTK.Vector3,OpenTK.Vector3,OpenTK.BEPUutilities.Plane,System.Single@,OpenTK.Vector3@)">
            <summary>
            Finds the intersection between the given segment and the given plane.
            </summary>
            <param name="a">First endpoint of segment.</param>
            <param name="b">Second endpoint of segment.</param>
            <param name="p">Plane for comparison.</param>
            <param name="t">Interval along segment to intersection.</param>
            <param name="q">Intersection point.</param>
            <returns>Whether or not the segment intersects the plane.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.Toolbox.GetLinePlaneIntersection(OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.BEPUutilities.Plane@,System.Single@,OpenTK.Vector3@)">
            <summary>
            Finds the intersection between the given line and the given plane.
            </summary>
            <param name="a">First endpoint of segment defining the line.</param>
            <param name="b">Second endpoint of segment defining the line.</param>
            <param name="p">Plane for comparison.</param>
            <param name="t">Interval along line to intersection (A + t * AB).</param>
            <param name="q">Intersection point.</param>
            <returns>Whether or not the line intersects the plane.  If false, the line is parallel to the plane's surface.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.Toolbox.GetRayPlaneIntersection(OpenTK.BEPUutilities.Ray@,OpenTK.BEPUutilities.Plane@,System.Single@,OpenTK.Vector3@)">
            <summary>
            Finds the intersection between the given ray and the given plane.
            </summary>
            <param name="ray">Ray to test against the plane.</param>
            <param name="p">Plane for comparison.</param>
            <param name="t">Interval along line to intersection (A + t * AB).</param>
            <param name="q">Intersection point.</param>
            <returns>Whether or not the line intersects the plane.  If false, the line is parallel to the plane's surface.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.Toolbox.GetClosestPointOnTriangleToPoint(OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@)">
            <summary>
            Determines the closest point on a triangle given by points a, b, and c to point p.
            </summary>
            <param name="a">First vertex of triangle.</param>
            <param name="b">Second vertex of triangle.</param>
            <param name="c">Third vertex of triangle.</param>
            <param name="p">Point for comparison.</param>
            <param name="closestPoint">Closest point on tetrahedron to point.</param>
            <returns>Voronoi region containing the closest point.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.Toolbox.GetClosestPointOnTriangleToPoint(OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.BEPUutilities.DataStructures.RawList{OpenTK.Vector3},OpenTK.Vector3@)">
            <summary>
            Determines the closest point on a triangle given by points a, b, and c to point p and provides the subsimplex whose voronoi region contains the point.
            </summary>
            <param name="a">First vertex of triangle.</param>
            <param name="b">Second vertex of triangle.</param>
            <param name="c">Third vertex of triangle.</param>
            <param name="p">Point for comparison.</param>
            <param name="subsimplex">The source of the voronoi region which contains the point.</param>
            <param name="closestPoint">Closest point on tetrahedron to point.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.Toolbox.GetClosestPointOnTriangleToPoint(OpenTK.BEPUutilities.DataStructures.RawList{OpenTK.Vector3},System.Int32,System.Int32,System.Int32,OpenTK.Vector3@,OpenTK.BEPUutilities.DataStructures.RawList{System.Int32},OpenTK.BEPUutilities.DataStructures.RawList{System.Single},OpenTK.Vector3@)">
            <summary>
            Determines the closest point on a triangle given by points a, b, and c to point p and provides the subsimplex whose voronoi region contains the point.
            </summary>
            <param name="q">Simplex containing triangle for testing.</param>
            <param name="i">Index of first vertex of triangle.</param>
            <param name="j">Index of second vertex of triangle.</param>
            <param name="k">Index of third vertex of triangle.</param>
            <param name="p">Point for comparison.</param>
            <param name="subsimplex">The source of the voronoi region which contains the point, enumerated as a = 0, b = 1, c = 2.</param>
            <param name="baryCoords">Barycentric coordinates of the point on the triangle.</param>
            <param name="closestPoint">Closest point on tetrahedron to point.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.Toolbox.IsPointInsideTriangle(OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@)">
            <summary>
            Determines if supplied point is within the triangle as defined by the provided vertices.
            </summary>
            <param name="vA">A vertex of the triangle.</param>
            <param name="vB">A vertex of the triangle.</param>
            <param name="vC">A vertex of the triangle.</param>
            <param name="p">The point for comparison against the triangle.</param>
            <returns>Whether or not the point is within the triangle.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.Toolbox.IsPointInsideTriangle(OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@,System.Single)">
            <summary>
            Determines if supplied point is within the triangle as defined by the provided vertices.
            </summary>
            <param name="vA">A vertex of the triangle.</param>
            <param name="vB">A vertex of the triangle.</param>
            <param name="vC">A vertex of the triangle.</param>
            <param name="p">The point for comparison against the triangle.</param>
            <param name="margin">Extra area on the edges of the triangle to include.  Can be negative.</param>
            <returns>Whether or not the point is within the triangle.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.Toolbox.GetClosestPointOnSegmentToPoint(OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@)">
            <summary>
            Determines the closest point on the provided segment ab to point p.
            </summary>
            <param name="a">First endpoint of segment.</param>
            <param name="b">Second endpoint of segment.</param>
            <param name="p">Point for comparison.</param>
            <param name="closestPoint">Closest point on the edge to p.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.Toolbox.GetClosestPointOnSegmentToPoint(OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@,System.Collections.Generic.List{OpenTK.Vector3},OpenTK.Vector3@)">
            <summary>
            Determines the closest point on the provided segment ab to point p.
            </summary>
            <param name="a">First endpoint of segment.</param>
            <param name="b">Second endpoint of segment.</param>
            <param name="p">Point for comparison.</param>
            <param name="subsimplex">The source of the voronoi region which contains the point.</param>
            <param name="closestPoint">Closest point on the edge to p.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.Toolbox.GetClosestPointOnSegmentToPoint(System.Collections.Generic.List{OpenTK.Vector3},System.Int32,System.Int32,OpenTK.Vector3@,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Single},OpenTK.Vector3@)">
            <summary>
            Determines the closest point on the provided segment ab to point p.
            </summary>
            <param name="q">List of points in the containing simplex.</param>
            <param name="i">Index of first endpoint of segment.</param>
            <param name="j">Index of second endpoint of segment.</param>
            <param name="p">Point for comparison.</param>
            <param name="subsimplex">The source of the voronoi region which contains the point, enumerated as a = 0, b = 1.</param>
            <param name="baryCoords">Barycentric coordinates of the point.</param>
            <param name="closestPoint">Closest point on the edge to p.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.Toolbox.GetSquaredDistanceFromPointToLine(OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@)">
            <summary>
            Determines the shortest squared distance from the point to the line.
            </summary>
            <param name="p">Point to check against the line.</param>
            <param name="a">First point on the line.</param>
            <param name="b">Second point on the line.</param>
            <returns>Shortest squared distance from the point to the line.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.Toolbox.GetClosestPointsBetweenSegments(OpenTK.Vector3,OpenTK.Vector3,OpenTK.Vector3,OpenTK.Vector3,OpenTK.Vector3@,OpenTK.Vector3@)">
            <summary>
            Computes closest points c1 and c2 betwen segments p1q1 and p2q2.
            </summary>
            <param name="p1">First point of first segment.</param>
            <param name="q1">Second point of first segment.</param>
            <param name="p2">First point of second segment.</param>
            <param name="q2">Second point of second segment.</param>
            <param name="c1">Closest point on first segment.</param>
            <param name="c2">Closest point on second segment.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.Toolbox.GetClosestPointsBetweenSegments(OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@,System.Single@,System.Single@,OpenTK.Vector3@,OpenTK.Vector3@)">
            <summary>
            Computes closest points c1 and c2 betwen segments p1q1 and p2q2.
            </summary>
            <param name="p1">First point of first segment.</param>
            <param name="q1">Second point of first segment.</param>
            <param name="p2">First point of second segment.</param>
            <param name="q2">Second point of second segment.</param>
            <param name="s">Distance along the line to the point for first segment.</param>
            <param name="t">Distance along the line to the point for second segment.</param>
            <param name="c1">Closest point on first segment.</param>
            <param name="c2">Closest point on second segment.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.Toolbox.GetClosestPointsBetweenLines(OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@,System.Single@,System.Single@,OpenTK.Vector3@,OpenTK.Vector3@)">
            <summary>
            Computes closest points c1 and c2 betwen lines p1q1 and p2q2.
            </summary>
            <param name="p1">First point of first segment.</param>
            <param name="q1">Second point of first segment.</param>
            <param name="p2">First point of second segment.</param>
            <param name="q2">Second point of second segment.</param>
            <param name="s">Distance along the line to the point for first segment.</param>
            <param name="t">Distance along the line to the point for second segment.</param>
            <param name="c1">Closest point on first segment.</param>
            <param name="c2">Closest point on second segment.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.Toolbox.ArePointsOnOppositeSidesOfPlane(OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@)">
            <summary>
            Determines if vectors o and p are on opposite sides of the plane defined by a, b, and c.
            </summary>
            <param name="o">First point for comparison.</param>
            <param name="p">Second point for comparison.</param>
            <param name="a">First vertex of the plane.</param>
            <param name="b">Second vertex of plane.</param>
            <param name="c">Third vertex of plane.</param>
            <returns>Whether or not vectors o and p reside on opposite sides of the plane.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.Toolbox.GetDistancePointToPlane(OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@)">
            <summary>
            Determines the distance between a point and a plane..
            </summary>
            <param name="point">Point to project onto plane.</param>
            <param name="normal">Normal of the plane.</param>
            <param name="pointOnPlane">Point located on the plane.</param>
            <returns>Distance from the point to the plane.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.Toolbox.GetPointProjectedOnPlane(OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@)">
            <summary>
            Determines the location of the point when projected onto the plane defined by the normal and a point on the plane.
            </summary>
            <param name="point">Point to project onto plane.</param>
            <param name="normal">Normal of the plane.</param>
            <param name="pointOnPlane">Point located on the plane.</param>
            <param name="projectedPoint">Projected location of point onto plane.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.Toolbox.IsPointWithinFaceExtrusion(OpenTK.Vector3,System.Collections.Generic.List{OpenTK.BEPUutilities.Plane},OpenTK.Vector3)">
            <summary>
            Determines if a point is within a set of planes defined by the edges of a triangle.
            </summary>
            <param name="point">Point for comparison.</param>
            <param name="planes">Edge planes.</param>
            <param name="centroid">A point known to be inside of the planes.</param>
            <returns>Whether or not the point is within the edge planes.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.Toolbox.GetClosestPointOnTetrahedronToPoint(OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@)">
            <summary>
            Determines the closest point on a tetrahedron to a provided point p.
            </summary>
            <param name="a">First vertex of the tetrahedron.</param>
            <param name="b">Second vertex of the tetrahedron.</param>
            <param name="c">Third vertex of the tetrahedron.</param>
            <param name="d">Fourth vertex of the tetrahedron.</param>
            <param name="p">Point for comparison.</param>
            <param name="closestPoint">Closest point on the tetrahedron to the point.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.Toolbox.GetClosestPointOnTetrahedronToPoint(OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.BEPUutilities.DataStructures.RawList{OpenTK.Vector3},OpenTK.Vector3@)">
            <summary>
            Determines the closest point on a tetrahedron to a provided point p.
            </summary>
            <param name="a">First vertex of the tetrahedron.</param>
            <param name="b">Second vertex of the tetrahedron.</param>
            <param name="c">Third vertex of the tetrahedron.</param>
            <param name="d">Fourth vertex of the tetrahedron.</param>
            <param name="p">Point for comparison.</param>
            <param name="subsimplex">The source of the voronoi region which contains the point.</param>
            <param name="closestPoint">Closest point on the tetrahedron to the point.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.Toolbox.GetClosestPointOnTetrahedronToPoint(OpenTK.BEPUutilities.DataStructures.RawList{OpenTK.Vector3},OpenTK.Vector3@,OpenTK.BEPUutilities.DataStructures.RawList{System.Int32},OpenTK.BEPUutilities.DataStructures.RawList{System.Single},OpenTK.Vector3@)">
            <summary>
            Determines the closest point on a tetrahedron to a provided point p.
            </summary>
            <param name="tetrahedron">List of 4 points composing the tetrahedron.</param>
            <param name="p">Point for comparison.</param>
            <param name="subsimplex">The source of the voronoi region which contains the point, enumerated as a = 0, b = 1, c = 2, d = 3.</param>
            <param name="baryCoords">Barycentric coordinates of p on the tetrahedron.</param>
            <param name="closestPoint">Closest point on the tetrahedron to the point.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.Toolbox.RayCastSphere(OpenTK.BEPUutilities.Ray@,OpenTK.Vector3@,System.Single,System.Single,OpenTK.BEPUutilities.RayHit@)">
            <summary>
             Tests a ray against a sphere.
            </summary>
            <param name="ray">Ray to test.</param>
            <param name="spherePosition">Position of the sphere.</param>
            <param name="radius">Radius of the sphere.</param>
            <param name="maximumLength">Maximum length of the ray in units of the ray direction's length.</param>
            <param name="hit">Hit data of the ray, if any.</param>
            <returns>Whether or not the ray hits the sphere.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.Toolbox.GetVelocityOfPoint(OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@)">
            <summary>
            Computes the velocity of a point as if it were attached to an object with the given center and velocity.
            </summary>
            <param name="point">Point to compute the velocity of.</param>
            <param name="center">Center of the object to which the point is attached.</param>
            <param name="linearVelocity">Linear velocity of the object.</param>
            <param name="angularVelocity">Angular velocity of the object.</param>
            <param name="velocity">Velocity of the point.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.Toolbox.GetVelocityOfPoint(OpenTK.Vector3,OpenTK.Vector3,OpenTK.Vector3,OpenTK.Vector3)">
            <summary>
            Computes the velocity of a point as if it were attached to an object with the given center and velocity.
            </summary>
            <param name="point">Point to compute the velocity of.</param>
            <param name="center">Center of the object to which the point is attached.</param>
            <param name="linearVelocity">Linear velocity of the object.</param>
            <param name="angularVelocity">Angular velocity of the object.</param>
            <returns>Velocity of the point.</returns>
        </member>
        <member name="M:OpenTK.BEPUutilities.Toolbox.ExpandBoundingBox(OpenTK.BEPUutilities.BoundingBox@,OpenTK.Vector3@)">
            <summary>
            Expands a bounding box by the given sweep.
            </summary>
            <param name="boundingBox">Bounding box to expand.</param>
            <param name="sweep">Sweep to expand the bounding box with.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.Toolbox.GetTriangleBoundingBox(OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.BEPUutilities.BoundingBox@)">
            <summary>
            Computes the bounding box of three points.
            </summary>
            <param name="a">First vertex of the triangle.</param>
            <param name="b">Second vertex of the triangle.</param>
            <param name="c">Third vertex of the triangle.</param>
            <param name="aabb">Bounding box of the triangle.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.Toolbox.UpdateOrientationRK4(OpenTK.Quaternion@,OpenTK.Matrix3x3@,OpenTK.Vector3@,System.Single,OpenTK.Quaternion@)">
            <summary>
            Updates the quaternion using RK4 integration.
            </summary>
            <param name="q">Quaternion to update.</param>
            <param name="localInertiaTensorInverse">Local-space inertia tensor of the object being updated.</param>
            <param name="angularMomentum">Angular momentum of the object.</param>
            <param name="dt">Time since last frame, in seconds.</param>
            <param name="newOrientation">New orientation quaternion.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.Toolbox.DifferentiateQuaternion(OpenTK.Quaternion@,OpenTK.Matrix3x3@,OpenTK.Vector3@,OpenTK.Quaternion@)">
            <summary>
            Finds the change in the rotation state quaternion provided the local inertia tensor and angular velocity.
            </summary>
            <param name="orientation">Orienatation of the object.</param>
            <param name="localInertiaTensorInverse">Local-space inertia tensor of the object being updated.</param>
            <param name="angularMomentum">Angular momentum of the object.</param>
             <param name="orientationChange">Change in quaternion.</param>
        </member>
        <member name="M:OpenTK.BEPUutilities.Toolbox.GetBarycentricCoordinates(OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@,OpenTK.Vector3@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Gets the barycentric coordinates of the point with respect to a triangle's vertices.
            </summary>
            <param name="p">Point to compute the barycentric coordinates of.</param>
            <param name="a">First vertex in the triangle.</param>
            <param name="b">Second vertex in the triangle.</param>
            <param name="c">Third vertex in the triangle.</param>
            <param name="aWeight">Weight of the first vertex.</param>
            <param name="bWeight">Weight of the second vertex.</param>
            <param name="cWeight">Weight of the third vertex.</param>
        </member>
    </members>
</doc>
